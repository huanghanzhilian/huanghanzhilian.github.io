<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>继小鹏的博客</title>
    <description>Actually, less is more!</description>
    <link>http://www.huanghanlian.com/</link>
    <atom:link href="http://www.huanghanlian.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 12 Mar 2017 00:47:33 +0800</pubDate>
    <lastBuildDate>Sun, 12 Mar 2017 00:47:33 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>基本概念和用法-综合应用BookStore  2-8</title>
        <description>&lt;p&gt;AngularJS实例开发&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-744d6ab9cec78f53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###界面原型设计&lt;/p&gt;

&lt;p&gt;拿到一个项目以后，首先根据功能点，根据需求分析，把界面先画出来，有了这个界面以后才能去搭建前台的一些界面，&lt;/p&gt;

&lt;p&gt;###怎么切分功能模块建立项目目录结构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-61b011c81442379d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###根据划分的目录结构使用angularjs UI和Bootstrap编写UI&lt;/p&gt;

&lt;p&gt;使用angularjs UI和Bootstrap编写UI先把界面先拉出来，可能没有功能，点击一些东西没有真正请求后台，但是我们可以先把界面先写出来，这样像流水线那样去写代码，可能有些人比较喜欢从前台一直写道后台，一直从css到js然后一直写道后台服务，写道数据库脚本，那么这样的开发方式。这种方式也不能说不好，但是从生产效率来说，最好还是使用流水线的方式， 就是说你做前台一些工作的时候，尽量把前台的一些东西写完，一批一批的去做，不用频繁的去切换上下文，因为频繁切换实际上带来是比较多效率的损失，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-02eb8eed83454348.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用Bootstrap布局登入页面&lt;/p&gt;

&lt;p&gt;这里登入页面没做校验直接可登入&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-2af9061535c42364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击登入进入列表页&lt;/p&gt;

&lt;p&gt;列表页左侧是根据不同的书籍类型右侧是&lt;code&gt;ng-guer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;点击左侧会加载不同类型数据&lt;/p&gt;

&lt;p&gt;这些数据都是假的， 把假数据写在json文件里面，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{
    &quot;bookId&quot;:&quot;1&quot;,
    &quot;index&quot;: &quot;1&quot;,
    &quot;name&quot;: &quot;用AngularJS开发下一代WEB应用&quot;,
    &quot;author&quot;: &quot;大漠穷秋&quot;,
    &quot;pubTime&quot;: &quot;2014-01-01&quot;,
    &quot;price&quot;:&quot;35&quot;
}, {
    &quot;bookId&quot;:&quot;2&quot;,
    &quot;index&quot;: &quot;2&quot;,
    &quot;name&quot;: &quot;Ext江湖&quot;,
    &quot;author&quot;: &quot;大漠穷秋&quot;,
    &quot;pubTime&quot;: &quot;2014-01-01&quot;,
    &quot;price&quot;:&quot;35&quot;
}]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种做法在开发中比较有用，如果总是依赖后台可能老是需要打扰你的同事，或者是你一直切换上下文，到后台去调试服务，这样其实工作的效率不会特别高，做前台的时候。可以做一些假的数据放在json里，把逻辑测试通过以后再去写后台，这个过程你顺手还把数据结构数据的结构给定义了，&lt;/p&gt;

&lt;p&gt;首先把界面写出来，一开始要写的就是模板，根据设计图然后通过样式，把模板写出来，&lt;/p&gt;

&lt;p&gt;比如登入的表单，&lt;code&gt;loginForm.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;div class=&quot;col-md-12&quot;&amp;gt;
                &amp;lt;h2 class=&quot;text-center&quot;&amp;gt;图书管理系统&amp;lt;/h2&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;div class=&quot;col-md-12&quot;&amp;gt;
                &amp;lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot;&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label class=&quot;col-md-2 control-label&quot;&amp;gt;
                            用户名：
                        &amp;lt;/label&amp;gt;
                        &amp;lt;div class=&quot;col-md-10&quot;&amp;gt;
                            &amp;lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;推荐使用126邮箱&quot; ng-model=&quot;userInfo.email&quot;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label class=&quot;col-md-2 control-label&quot;&amp;gt;
                            密码：
                        &amp;lt;/label&amp;gt;
                        &amp;lt;div class=&quot;col-md-10&quot;&amp;gt;
                            &amp;lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;只能是数字、字母、下划线&quot; ng-model=&quot;userInfo.password&quot;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;div class=&quot;col-md-offset-2 col-md-10&quot;&amp;gt;
                            &amp;lt;a ui-sref=&quot;booklist({bookType:0})&quot; class=&quot;btn btn-success btn-lg&quot;&amp;gt;登录&amp;lt;/a&amp;gt;
                            &amp;lt;button class=&quot;btn btn-default btn-lg&quot; ng-click=&quot;setFormData()&quot;&amp;gt;注册&amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;home.html&lt;/code&gt;home是最开始作为容器的一个东西，&lt;/p&gt;

&lt;p&gt;把模板都写出来之后再去写js的代码，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div ui-view=&quot;main&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###路由的使用&lt;/p&gt;

&lt;p&gt;AngularJS内置有路由的工具但是不太好用，在真正的项目开发中，还是要用&lt;code&gt;UIRouter&lt;/code&gt;路由工具，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-a65a7e724786e70a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:58:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics10.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics10.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-Service与Peovider  2-7</title>
        <description>&lt;p&gt;###使用$http服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;
		&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;HTTPBasic.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;LoadDataCtrl&quot;&amp;gt;
			&amp;lt;ul&amp;gt;
				&amp;lt;li ng-repeat=&quot;user in users&quot;&amp;gt;
					
				&amp;lt;/li&amp;gt;
			&amp;lt;/ul&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有ng-controller叫做LoadDataCtrl，&lt;/p&gt;

&lt;p&gt;这个ng-controller有个列表&lt;code&gt;ng-repeat&lt;/code&gt;将数组循环出来。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-repeat=&quot;user in users&quot;&lt;/code&gt;这里的&lt;code&gt;users&lt;/code&gt;数据不再是像前面写列子一样写死在代码里面，希望通过后台去加载进来，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule=angular.module(&quot;MyModule&quot;,[]);
myModule.controller(&#39;LoadDataCtrl&#39;, [&#39;$scope&#39;,&#39;$http&#39;, function($scope,$http){
	$http({
        method: &#39;GET&#39;,
        url: &#39;data.json&#39;
    }).success(function(data, status, headers, config) {
        console.log(&quot;success...&quot;);
        console.log(data);
        $scope.users=data;
    }).error(function(data, status, headers, config) {
        console.log(&quot;error...&quot;);
    });
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用AngularJS里面的&lt;code&gt;$http&lt;/code&gt;这个服务，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;method: &#39;GET&#39;,&lt;/code&gt;  数据交互方式&lt;code&gt;GET或POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url: &#39;data.json&#39;&lt;/code&gt;要请求哪个地址。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;success&lt;/code&gt;成功后执行函数&lt;/p&gt;

&lt;p&gt;&lt;code&gt;error&lt;/code&gt;请求错误执行函数&lt;/p&gt;

&lt;p&gt;这里请求的是&lt;code&gt;json&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[{
    &quot;name&quot;: &quot;《用AngularJS开发下一代WEB应用》&quot;
},{
    &quot;name&quot;: &quot;《Ext江湖》&quot;
},{
    &quot;name&quot;: &quot;《ActionScript3.0游戏设计基础（第二版）》&quot;
}]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拿到这些数据以后把他&lt;code&gt;$scope.users&lt;/code&gt;上面去&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$scope.users=data;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###创建自己的Service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html ng-app=&quot;MyServiceApp&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;framework/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
    &amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;MyService1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ng-controller=&quot;ServiceController&quot;&amp;gt;
        &amp;lt;label&amp;gt;用户名&amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;text&quot; ng-model=&quot;username&quot; placeholder=&quot;请输入用户名&quot; /&amp;gt;
        &amp;lt;pre ng-show=&quot;username&quot;&amp;gt;&amp;lt;/pre&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有一个&lt;code&gt;inout&lt;/code&gt;他的&lt;code&gt;ng-model&lt;/code&gt;等于&lt;code&gt;username&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;要实现的效果是当输入项内容发生变化的时候就去向后台发起请求，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myServiceApp = angular.module(&quot;MyServiceApp&quot;, []);
myServiceApp.factory(&#39;userListService&#39;, [&#39;$http&#39;,
    function($http) {
        var doRequest = function(username, path) {
            return $http({
                method: &#39;GET&#39;,
                url: &#39;users.json&#39;
            });
        }
        return {
            userList: function(username) {
                return doRequest(username, &#39;userList&#39;);
            }
        };
    }
]);

myServiceApp.controller(&#39;ServiceController&#39;, [&#39;$scope&#39;, &#39;$timeout&#39;, &#39;userListService&#39;,
    function($scope, $timeout, userListService) {
        var timeout;
        $scope.$watch(&#39;username&#39;, function(newUserName) {
            if (newUserName) {
                if (timeout) {
                    $timeout.cancel(timeout);
                }
                timeout = $timeout(function() {
                    userListService.userList(newUserName)
                        .success(function(data, status) {
                            $scope.users = data;
                        });
                }, 350);
            }
        });
    }
]);

//...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AngularJS封装了叫&lt;code&gt;$watch&lt;/code&gt;用来监控一个数据模型的变化，这里利用&lt;code&gt;$watch&lt;/code&gt;来监听，&lt;/p&gt;

&lt;p&gt;监听&lt;code&gt;username&lt;/code&gt;他发生变化以后执行一个匿名函数，这个函数里面来检测是不是拿到新的&lt;code&gt;newUserName&lt;/code&gt;如果拿到新的值就向后台去发送请求，&lt;/p&gt;

&lt;p&gt;那么调用谁去发请求呢？就调用自己封装的&lt;code&gt;userListService&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个地方有一个比较绕的东西叫做&lt;code&gt;&#39;$timeout&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个&lt;code&gt;&#39;$timeout&#39;&lt;/code&gt;就是说当我们在页面上进行输入的时候不是说我们每次按下减排他就去请求后台，如果这样的话会发现页面会抖动，假如说每按下一个键他就去向后台发起请求，很显然页面会不断地狂刷，&lt;/p&gt;

&lt;p&gt;这个时候加一个防止抖动的处理，这是比较常见的动作，只有当你&lt;code&gt;350&lt;/code&gt;毫秒不再按下一个按键的时候，就是说延迟350毫秒没有按下，这个时候他才会去向后台发起请求。&lt;/p&gt;

&lt;p&gt;当你连续按键的时候，并不会向后台连续发送请求，&lt;/p&gt;

&lt;p&gt;最后调用的函数是&lt;code&gt;userListService.userList&lt;/code&gt;这个函数，&lt;/p&gt;

&lt;p&gt;自己定义的&lt;code&gt;Service&lt;/code&gt;和AngularJS内置的&lt;code&gt;Service&lt;/code&gt;有两点不同点，&lt;/p&gt;

&lt;p&gt;一种是我们自己定义的&lt;code&gt;Service&lt;/code&gt;他的命名不要用&lt;code&gt;$&lt;/code&gt;打头，&lt;/p&gt;

&lt;p&gt;第二我们自己定义的&lt;code&gt;Service&lt;/code&gt;也是可以向AngularJS内置的服务一样去进行注入的，但是注入的时候有一个不同的地方，就是说我们自己定义的&lt;code&gt;Service&lt;/code&gt;是必须放在最后一个的，&lt;/p&gt;

&lt;p&gt;有了这个&lt;code&gt;Service&lt;/code&gt;以后，假设要做相同的操作就可以去一直去调用它，很多的&lt;code&gt;controller&lt;/code&gt;控制器都可以去共用的，从而实现了这个功能的复用，&lt;/p&gt;

&lt;p&gt;比如说我要把&lt;code&gt;userListService&lt;/code&gt;抽出作为自己的服务，这个Servuce里面会去返回&lt;code&gt;userList&lt;/code&gt;用户列表数据。&lt;/p&gt;

&lt;p&gt;把它抽成一个服务之后，其他的控制器就可以调用它，&lt;/p&gt;

&lt;p&gt;项目中控制器会有很多，如果有控制器之间有代码相同，那么就可以抽到Servuce服务里面，方便调用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-fffa1f271901c615.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###Service的特性&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-bdf22fc399e21f2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###Service，Factory，Porvider，本质上都是Porvider&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-79e457e466cc4831.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###使用$filter&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-8ca8222843d1b55f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###其他内置Service介绍&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-af691fa30e840a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:56:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics9.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics9.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-指令 2-6</title>
        <description>&lt;p&gt;###解析最简单的指令hello：匹配模式restrict&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;div hello&amp;gt;&amp;lt;/div&amp;gt;
		&amp;lt;div class=&quot;hello&quot;&amp;gt;&amp;lt;/div&amp;gt;
		&amp;lt;!-- directive:hello --&amp;gt;
		&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;HelloAngular_Directive.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;AEMC&#39;,
        template: &#39;&amp;lt;div&amp;gt;Hi everyone!&amp;lt;/div&amp;gt;&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-aeca8e4842100d37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;restrict&lt;/strong&gt;表示匹配模式&lt;/p&gt;

&lt;p&gt;A表示属性&lt;br /&gt;
E表示元素&lt;br /&gt;
M表示注释&lt;br /&gt;
C表示样式类&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-2e1b8c9033ab7db2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###解析最简单的指令hello：template，templateUrl，$templateCache&lt;/p&gt;

&lt;p&gt;在上面最简单的指令里面有一个配置项&lt;strong&gt;template&lt;/strong&gt;这是最总要显示的html标签&lt;/p&gt;

&lt;p&gt;使用这种方式编写的内容比较少，&lt;/p&gt;

&lt;p&gt;AngularJS提供了&lt;strong&gt;templateUrl&lt;/strong&gt;配置项，使用这个就不需要把模板写道js代码里面&lt;/p&gt;

&lt;p&gt;把模板切成独立的html去编写，可以编写很多内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;templateUrl.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;AECM&#39;,
        templateUrl: &#39;hello.html&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
    &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-title&quot;&amp;gt;双向数据绑定&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;div class=&quot;col-md-12&quot;&amp;gt;
                &amp;lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; ng-controller=&quot;UserInfoCtrl&quot;&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label class=&quot;col-md-2 control-label&quot;&amp;gt;
                            邮箱：
                        &amp;lt;/label&amp;gt;
                        &amp;lt;div class=&quot;col-md-10&quot;&amp;gt;
                            &amp;lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;推荐使用126邮箱&quot; ng-model=&quot;userInfo.email&quot;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;label class=&quot;col-md-2 control-label&quot;&amp;gt;
                            密码：
                        &amp;lt;/label&amp;gt;
                        &amp;lt;div class=&quot;col-md-10&quot;&amp;gt;
                            &amp;lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;只能是数字、字母、下划线&quot; ng-model=&quot;userInfo.password&quot;&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;div class=&quot;col-md-offset-2 col-md-10&quot;&amp;gt;
                            &amp;lt;div class=&quot;checkbox&quot;&amp;gt;
                                &amp;lt;label&amp;gt;
                                    &amp;lt;input type=&quot;checkbox&quot; ng-model=&quot;userInfo.autoLogin&quot;&amp;gt;自动登录
                                &amp;lt;/label&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                        &amp;lt;div class=&quot;col-md-offset-2 col-md-10&quot;&amp;gt;
                            &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;getFormData()&quot;&amp;gt;获取Form表单的值&amp;lt;/button&amp;gt;
                            &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;setFormData()&quot;&amp;gt;设置Form表单的值&amp;lt;/button&amp;gt;
                            &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;resetForm()&quot;&amp;gt;重置表单&amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-cf3c066e122727d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;$templateCache.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);

//注射器加载完所有模块时，此方法执行一次
myModule.run(function($templateCache){
	$templateCache.put(&quot;hello.html&quot;,&quot;&amp;lt;div&amp;gt;Hello everyone!!!!!!&amp;lt;/div&amp;gt;&quot;);
});

myModule.directive(&quot;hello&quot;, function($templateCache) {
    return {
        restrict: &#39;AECM&#39;,
        template: $templateCache.get(&quot;hello.html&quot;),
        replace: true
    }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;$templateCache&lt;/strong&gt;这个配置项是缓存的意思。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;  template: $templateCache.get(&quot;hello.html&quot;),&lt;/code&gt;就可以使用&lt;/p&gt;

&lt;p&gt;也就是说将模板缓存起来去让多个指令去使用他&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-1f01cdf23ded59fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###解析最简单的指令hello：replace与trabsclude&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;
			&amp;lt;div&amp;gt;这里是指令内部的内容。&amp;lt;/div&amp;gt;
		&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;replace.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
    	restrict:&quot;AE&quot;,
    	template:&quot;&amp;lt;div&amp;gt;Hello everyone!&amp;lt;/div&amp;gt;&quot;,
    	replace:true
    } 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hello作为一个元素当然是可以嵌套的，&lt;/p&gt;

&lt;p&gt;如果使用&lt;strong&gt;replace&lt;/strong&gt;配置项内部写的内容就会被替换掉，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-fbd8f70d905e37e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是有一个div&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;hello&amp;gt;
			&amp;lt;div&amp;gt;这里是指令内部的内容。&amp;lt;/div&amp;gt;
		&amp;lt;/hello&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;strong&gt;trabsclude&lt;/strong&gt;方式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;trabsclude&lt;/strong&gt;表示变换，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;
			&amp;lt;div&amp;gt;这里是指令内部的内容。&amp;lt;/div&amp;gt;
		&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;transclude.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
    	restrict:&quot;AE&quot;,
    	transclude:true,
    	template:&quot;&amp;lt;div&amp;gt;Hello everyone!&amp;lt;div ng-transclude&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot;
    } 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-6b01c1ebfddecea7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;strong&gt;trabsclude&lt;/strong&gt;内部嵌套的内容会保存下来。这个有非常重要的作用，因为指令互相之间是可以嵌套的，如果最外层的指令把内部的内容全部替换，很显然内部的指令没有办法起作用。&lt;/p&gt;

&lt;p&gt;###comile与link(操作元素，添加css样式，绑定事件)&lt;/p&gt;

&lt;p&gt;指令在执行时候的机制&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-fd90df1125c52758.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###指令与控制器之间的交互&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;MyCtrl&quot;&amp;gt;
			&amp;lt;loader howToLoad=&quot;loadData()&quot;&amp;gt;滑动加载&amp;lt;/loader&amp;gt;
		&amp;lt;/div&amp;gt;
		&amp;lt;div ng-controller=&quot;MyCtrl2&quot;&amp;gt;
			&amp;lt;loader howToLoad=&quot;loadData2()&quot;&amp;gt;滑动加载&amp;lt;/loader&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;Directive&amp;amp;Controller.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.controller(&#39;MyCtrl&#39;, [&#39;$scope&#39;, function($scope){
	$scope.loadData=function(){
		console.log(&quot;加载数据中...&quot;);
    }
}]);
myModule.controller(&#39;MyCtrl2&#39;, [&#39;$scope&#39;, function($scope){
    $scope.loadData2=function(){
        console.log(&quot;加载数据中...22222&quot;);
    }
}]);
myModule.directive(&quot;loader&quot;, function() {
    return {
    	restrict:&quot;AE&quot;,
    	link:function(scope,element,attrs){
    		element.bind(&#39;mouseenter&#39;, function(event) {
    			//scope.loadData();
    			// scope.$apply(&quot;loadData()&quot;);
    			// 注意这里的坑，howToLoad会被转换成小写的howtoload
    			scope.$apply(attrs.howtoload);
    		});
        }
    } 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指令通过属性值的不同来调用不同控制器上的方法&lt;/p&gt;

&lt;p&gt;link:function(scope,element,attrs)&lt;/p&gt;

&lt;p&gt;scope作用域&lt;/p&gt;

&lt;p&gt;element元素&lt;/p&gt;

&lt;p&gt;attrs属性&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-8fba9732b4eb025f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###指令间的交互&lt;/p&gt;

&lt;p&gt;scope: {},   创建独立作用域scope&lt;/p&gt;

&lt;p&gt;这里面的controller和MVC的controller不是一个东西，这个是指令内部的controller，他是用来给我们的指令暴露出一组方法给外部去调用的。&lt;/p&gt;

&lt;p&gt;supermanCtrl在link中&lt;/p&gt;

&lt;p&gt;controller给指令暴露了三个方法&lt;/p&gt;

&lt;p&gt;指令间的交互是通过指令上面内部的&lt;strong&gt;controller&lt;/strong&gt;暴露出来的方法来给外部进行调用的，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
    &amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;Directive&amp;amp;Directive.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
	&amp;lt;div class=&quot;row&quot;&amp;gt;
		&amp;lt;div class=&quot;col-md-3&quot;&amp;gt;
			&amp;lt;superman strength&amp;gt;动感超人---力量&amp;lt;/superman&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;div class=&quot;row&quot;&amp;gt;
		&amp;lt;div class=&quot;col-md-3&quot;&amp;gt;
			&amp;lt;superman strength speed&amp;gt;动感超人2---力量+敏捷&amp;lt;/superman&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
	&amp;lt;div class=&quot;row&quot;&amp;gt;
		&amp;lt;div class=&quot;col-md-3&quot;&amp;gt;
			&amp;lt;superman strength speed light&amp;gt;动感超人3---力量+敏捷+发光&amp;lt;/superman&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;superman&quot;, function() {
    return {
        scope: {},
        restrict: &#39;AE&#39;,
        controller: function($scope) {
            $scope.abilities = [];

            this.addStrength = function() {
                $scope.abilities.push(&quot;strength&quot;);
            };
            this.addSpeed = function() {
                $scope.abilities.push(&quot;speed&quot;);
            };
            this.addLight = function() {
                $scope.abilities.push(&quot;light&quot;);
            };
        },
        link: function(scope, element, attrs) {
            element.addClass(&#39;btn btn-primary&#39;);
            element.bind(&quot;mouseenter&quot;, function() {
                console.log(scope.abilities);
            });
        }
    }
});
myModule.directive(&quot;strength&quot;, function() {
    return {
        require: &#39;^superman&#39;,
        link: function(scope, element, attrs, supermanCtrl) {
            supermanCtrl.addStrength();
        }
    }
});
myModule.directive(&quot;speed&quot;, function() {
    return {
        require: &#39;^superman&#39;,
        link: function(scope, element, attrs, supermanCtrl) {
            supermanCtrl.addSpeed();
        }
    }
});
myModule.directive(&quot;light&quot;, function() {
    return {
        require: &#39;^superman&#39;,
        link: function(scope, element, attrs, supermanCtrl) {
            supermanCtrl.addLight();
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-29ee8200b7aed295.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###scope的类型与独立scope&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是独立scope&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;IsolateScope.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;页面上有四个hello指令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;AE&#39;,
        template: &#39;&amp;lt;div&amp;gt;&amp;lt;input type=&quot;text&quot; ng-model=&quot;userName&quot;/&amp;gt;&amp;lt;/div&amp;gt;&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给这个指令上面加了input&lt;br /&gt;
用来接收用户的输入，然后后面加了双向数据绑用来展示输入的内容，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-9d058b72b91d4094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;页面上有四个input，因为这里没有给他创建独立scope会造成当我们其中一个任意input输入发生变化时，会影响其他三个指令实例。&lt;/p&gt;

&lt;p&gt;这是有问题的，他们应该互相不受影响，就没有办法独立去使用了，&lt;/p&gt;

&lt;p&gt;创建独立scope很简单只要加一个配置项，&lt;code&gt;scope:{}&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;IsolateScope.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;AE&#39;,
        scope:{},
        template: &#39;&amp;lt;div&amp;gt;&amp;lt;input type=&quot;text&quot; ng-model=&quot;userName&quot;/&amp;gt;&amp;lt;/div&amp;gt;&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-3eee206b8ca4020a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个时候每个指令都有他独立的scope空间，这样他们就不会互相影响了。&lt;/p&gt;

&lt;p&gt;###scope的绑定策略&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是绑定策略&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-058d726680968696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;MyCtrl&quot;&amp;gt;
			&amp;lt;drink flavor=&quot;&quot;&amp;gt;&amp;lt;/drink&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;ScopeAt.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先指令drink 有一个叫flavor一个自定义的属性，使用绑定了一个ctrlFlavor属性&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.controller(&#39;MyCtrl&#39;, [&#39;$scope&#39;, function($scope){
	$scope.ctrlFlavor=&quot;百威&quot;;
}])
myModule.directive(&quot;drink&quot;, function() {
    return {
    	restrict:&#39;AE&#39;,
        template:&quot;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&quot;,
        link:function(scope,element,attrs){
        	scope.flavor=attrs.flavor;
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义控制器上面赋值一个属性ctrlFlavor值是百威&lt;/p&gt;

&lt;p&gt;定义指令drink&lt;/p&gt;

&lt;p&gt;template模板用来显示内容&lt;/p&gt;

&lt;p&gt;link函数里面把指令属性flavor的值赋给scope里flavor属性&lt;/p&gt;

&lt;p&gt;实际上template模板用来显示内容是来自于scope上面的flavor属性&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div ng-controller=&quot;MyCtrl&quot;&amp;gt;
			&amp;lt;drink flavor=&quot;&quot;&amp;gt;&amp;lt;/drink&amp;gt;
		&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于在指令用的这个地方把flavor绑定到了控制器里面的ctrlFlavor上面所以指令里面显示的应该是百威。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-6e4b26e6840fb3ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样的写法如果每次都这样写会比较累，实际上可以通过&lt;code&gt;scope:{flavor:&#39;@&#39;}&lt;/code&gt;这样的方式去写，link函数部分就可以不需要了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;MyCtrl&quot;&amp;gt;
			&amp;lt;drink flavor=&quot;&quot;&amp;gt;&amp;lt;/drink&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;ScopeAt.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.controller(&#39;MyCtrl&#39;, [&#39;$scope&#39;, function($scope){
	$scope.ctrlFlavor=&quot;百威&quot;;
}])
myModule.directive(&quot;drink&quot;, function() {
    return {
    	restrict:&#39;AE&#39;,
        scope: {
            flavor: &#39;@&#39;
        },
        template:&quot;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&quot;,
        /*link:function(scope,element,attrs){
        	scope.flavor=attrs.flavor;
        }*/
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样写和之前也是等价的。&lt;/p&gt;

&lt;p&gt;这个是&lt;code&gt;@&lt;/code&gt;绑定，有一个地方需要注意他传递的是字符串传递的不是对象&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;scope  = 号的绑定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这种绑定是双向进行绑定&lt;/p&gt;

&lt;p&gt;业务是这样的dang不仅仅要把$scope上的ctrlFlavor传递给指令，当指令来修改了$scope上的ctrlFlavor的内容希望也让控制器里面的内容也发生变化，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;MyCtrl&quot;&amp;gt;
			Ctrl:
			&amp;lt;br&amp;gt;
			&amp;lt;input type=&quot;text&quot; ng-model=&quot;ctrlFlavor&quot;&amp;gt;
			&amp;lt;br&amp;gt;
			Directive:
			&amp;lt;br&amp;gt;
			&amp;lt;drink flavor=&quot;ctrlFlavor&quot;&amp;gt;&amp;lt;/drink&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;ScopeEqual.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.controller(&#39;MyCtrl&#39;, [&#39;$scope&#39;, function($scope){
	$scope.ctrlFlavor=&quot;百威&quot;;
}])
myModule.directive(&quot;drink&quot;, function() {
    return {
    	restrict:&#39;AE&#39;,
        scope:{
        	flavor:&#39;=&#39;
        },
        template:&#39;&amp;lt;input type=&quot;text&quot; ng-model=&quot;flavor&quot;/&amp;gt;&#39;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过 scope:{flavor:’=’},就把flavor的内容绑定到$scope.ctrlFlavor=”百威”;上面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-002b87786e15b653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;scope  &amp;amp; 号的绑定&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;MyCtrl&quot;&amp;gt;
			&amp;lt;greeting greet=&quot;sayHello(name)&quot;&amp;gt;&amp;lt;/greeting&amp;gt;
			&amp;lt;greeting greet=&quot;sayHello(name)&quot;&amp;gt;&amp;lt;/greeting&amp;gt;
			&amp;lt;greeting greet=&quot;sayHello(name)&quot;&amp;gt;&amp;lt;/greeting&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;ScopeAnd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有greeting 指令，这个指令里面要调用控制器上面的方法叫sayHello&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.controller(&#39;MyCtrl&#39;, [&#39;$scope&#39;, function($scope){
	$scope.sayHello=function(name){
		alert(&quot;Hello &quot;+name);
	}
}])
myModule.directive(&quot;greeting&quot;, function() {
    return {
    	restrict:&#39;AE&#39;,
        scope:{
        	greet:&#39;&amp;amp;&#39;
        },
        template:&#39;&amp;lt;input type=&quot;text&quot; ng-model=&quot;userName&quot; /&amp;gt;&amp;lt;br/&amp;gt;&#39;+
        		 &#39;&amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;greet({name:userName})&quot;&amp;gt;Greeting&amp;lt;/button&amp;gt;&amp;lt;br/&amp;gt;&#39;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;js中有一个控制器，作用域上有sayHello方法，弹参数出来。&lt;/p&gt;

&lt;p&gt;写了greeting指令，写了scope:{greet:’&amp;amp;’},&lt;/p&gt;

&lt;p&gt;在模板里面用一个按钮调用greet函数&lt;/p&gt;

&lt;p&gt;这个函数在页面上绑定控制器上面的sayHello方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-85a3d700eebb36dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###AngularJS内置的指令&lt;/p&gt;

&lt;p&gt;http://ngnice.com/  AngularJS-api&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-0ed1c903dd25c550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-ce0e5302ffc8b580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html ng-app=&#39;TestFormModule&#39;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;
		&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;FormBasic.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;form name=&quot;myForm&quot; ng-submit=&quot;save()&quot; ng-controller=&quot;TestFormModule&quot;&amp;gt;
			  &amp;lt;input name=&quot;userName&quot; type=&quot;text&quot; ng-model=&quot;user.userName&quot; required/&amp;gt;
			  &amp;lt;input name=&quot;password&quot; type=&quot;password&quot; ng-model=&quot;user.password&quot; required/&amp;gt;
			  &amp;lt;input type=&quot;submit&quot; ng-disabled=&quot;myForm.$invalid&quot;/&amp;gt;
		&amp;lt;/form&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var appModule = angular.module(&#39;TestFormModule&#39;, []);
appModule.controller(&quot;TestFormModule&quot;,function($scope){
	$scope.user={
		userName:&#39;damoqiongqiu&#39;,
		password:&#39;&#39;
	};
	$scope.save=function(){
		alert(&quot;保存数据!&quot;);
	}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-973ff96722645d86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;FormAdv1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;Controller&quot;&amp;gt;
			&amp;lt;form name=&quot;form&quot; class=&quot;css-form&quot; novalidate&amp;gt;
				Name:
				&amp;lt;input type=&quot;text&quot; ng-model=&quot;user.name&quot; name=&quot;uName&quot; required /&amp;gt;&amp;lt;br/&amp;gt;
				E-mail:
				&amp;lt;input type=&quot;email&quot; ng-model=&quot;user.email&quot; name=&quot;uEmail&quot; required /&amp;gt;&amp;lt;br/&amp;gt;
				&amp;lt;div ng-show=&quot;form.uEmail.$dirty &amp;amp;&amp;amp; form.uEmail.$invalid&quot;&amp;gt;
					Invalid:
					&amp;lt;span ng-show=&quot;form.uEmail.$error.required&quot;&amp;gt;Tell us your email.&amp;lt;/span&amp;gt;
					&amp;lt;span ng-show=&quot;form.uEmail.$error.email&quot;&amp;gt;This is not a valid email.&amp;lt;/span&amp;gt;
				&amp;lt;/div&amp;gt;
				Gender:&amp;lt;br/&amp;gt;
				&amp;lt;input type=&quot;radio&quot; ng-model=&quot;user.gender&quot; value=&quot;male&quot; /&amp;gt;
				male
				&amp;lt;input type=&quot;radio&quot; ng-model=&quot;user.gender&quot; value=&quot;female&quot; /&amp;gt;
				female&amp;lt;br/&amp;gt;
				&amp;lt;input type=&quot;checkbox&quot; ng-model=&quot;user.agree&quot; name=&quot;userAgree&quot; required /&amp;gt;
				I agree:
				&amp;lt;input ng-show=&quot;user.agree&quot; type=&quot;text&quot; ng-model=&quot;user.agreeSign&quot; required /&amp;gt;
				&amp;lt;div ng-show=&quot;!user.agree || !user.agreeSign&quot;&amp;gt;
					Please agree and sign.
				&amp;lt;/div&amp;gt;
				&amp;lt;br/&amp;gt;
				&amp;lt;button ng-click=&quot;reset()&quot; ng-disabled=&quot;isUnchanged(user)&quot;&amp;gt;
					RESET
				&amp;lt;/button&amp;gt;
				&amp;lt;button ng-click=&quot;update(user)&quot; ng-disabled=&quot;form.$invalid || isUnchanged(user)&quot;&amp;gt;
					SAVE
				&amp;lt;/button&amp;gt;
			&amp;lt;/form&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Controller($scope) {
	$scope.master = {};

	$scope.update = function(user) {
		$scope.master = angular.copy(user);
	};

	$scope.reset = function() {
		$scope.user = angular.copy($scope.master);
	};

	$scope.isUnchanged = function(user) {
		return angular.equals(user, $scope.master);
	};

	$scope.reset();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###实例解析Expander&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html ng-app=&#39;expanderModule&#39;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ExpanderSimple.css&quot;/&amp;gt;
		&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;ExpanderSimple.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&#39;SomeController&#39;&amp;gt;
			&amp;lt;expander class=&#39;expander&#39; expander-title=&#39;title&#39;&amp;gt;
				
			&amp;lt;/expander&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义一个控制器 ，写入expander指令，后面的expander-title=’title’是使用ag绑定策略来进行绑定，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var expanderModule=angular.module(&#39;expanderModule&#39;, []);
expanderModule.directive(&#39;expander&#39;, function() {
	return {
		restrict : &#39;EA&#39;,
		replace : true,
		transclude : true,
		scope : {
			title : &#39;=expanderTitle&#39;
		},
		template : &#39;&amp;lt;div&amp;gt;&#39;
				 + &#39;&amp;lt;div class=&quot;title&quot; ng-click=&quot;toggle()&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;
				 + &#39;&amp;lt;div class=&quot;body&quot; ng-show=&quot;showMe&quot; ng-transclude&amp;gt;&amp;lt;/div&amp;gt;&#39;
				 + &#39;&amp;lt;/div&amp;gt;&#39;,
		link : function(scope, element, attrs) {
			scope.showMe = false;
			scope.toggle = function() {
				scope.showMe = !scope.showMe;
			}
		}
	}
});
expanderModule.controller(&#39;SomeController&#39;,function($scope) {
    $scope.title = &#39;点击展开&#39;;
	$scope.text = &#39;这里是内部的内容。&#39;;
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先directive定义一个指令expander&lt;/p&gt;

&lt;p&gt;restrict : ‘EA’,  可以用元素也可以用属性，&lt;/p&gt;

&lt;p&gt;replace : true,   会替换&lt;/p&gt;

&lt;p&gt;transclude : true,  内部内容是可以变换的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;scope : {
			title : &#39;=expanderTitle&#39;
		},
//=  等于号这样一个等值绑定  绑定expanderTitle这样一个东西，
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个东西就是页面上写的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;expander class=&#39;expander&#39; expander-title=&#39;title&#39;&amp;gt;
				
			&amp;lt;/expander&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;template&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;template : &#39;&amp;lt;div&amp;gt;&#39;
                 + &#39;&amp;lt;div class=&quot;title&quot; ng-click=&quot;toggle()&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;
                 + &#39;&amp;lt;div class=&quot;body&quot; ng-show=&quot;showMe&quot; ng-transclude&amp;gt;&amp;lt;/div&amp;gt;&#39;
                 + &#39;&amp;lt;/div&amp;gt;&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;template里面有一个ng-click绑定到&lt;code&gt;toggle()&lt;/code&gt;这样一个方法上面，这个方法是有指令&lt;code&gt;link&lt;/code&gt;这个函数里面提供出来的，很显然是指令内部去使用，外部是调取不到这个方法的，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;link : function(scope, element, attrs) {
			scope.showMe = false;
			scope.toggle = function() {
				scope.showMe = !scope.showMe;
			}
		}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看看&lt;code&gt;ng-show&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-show&lt;/code&gt;是用来进行显示和隐藏的切换的，他会根据&lt;code&gt;showMe &lt;/code&gt;的属性是不是为&lt;code&gt;true&lt;/code&gt;来决定这个&lt;code&gt;div&lt;/code&gt;到底显不显示。&lt;/p&gt;

&lt;p&gt;以上是一个简单指令的例子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-9e39a4fc357db349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###Accordion&lt;/p&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.expander {
	border: 1px solid black;
	width: 250px;
}

.expander&amp;gt;.title {
	background-color: black;
	color: white;
	padding: .1em .3em;
	cursor: pointer;
}

.expander&amp;gt;.body {
	padding: .1em .3em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html ng-app=&quot;expanderModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;Accordion.css&quot;/&amp;gt;
		&amp;lt;script src=&quot;framework/angular-1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;Accordion.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body ng-controller=&#39;SomeController&#39; &amp;gt;
		&amp;lt;accordion&amp;gt;
			&amp;lt;expander class=&#39;expander&#39; ng-repeat=&#39;expander in expanders&#39; expander-title=&#39;expander.title&#39;&amp;gt;
				
			&amp;lt;/expander&amp;gt;
		&amp;lt;/accordion&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里面指令进了嵌套，外面是个&lt;code&gt;accordion&lt;/code&gt;，内部是&lt;code&gt;expander &lt;/code&gt;这样一个指令，&lt;code&gt;expander &lt;/code&gt;使用&lt;code&gt;ng-repeat=&#39;expander in expanders&#39;&lt;/code&gt;来进行迭代，他会根据&lt;code&gt;expanders&lt;/code&gt;数组里面内容来决定创建多少个&lt;code&gt;expander &lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var expModule=angular.module(&#39;expanderModule&#39;,[])
expModule.directive(&#39;accordion&#39;, function() {
	return {
		restrict : &#39;EA&#39;,
		replace : true,
		transclude : true,
		template : &#39;&amp;lt;div ng-transclude&amp;gt;&amp;lt;/div&amp;gt;&#39;,
		controller : function() {
			var expanders = [];
			this.gotOpened = function(selectedExpander) {
				angular.forEach(expanders, function(expander) {
					if (selectedExpander != expander) {
						expander.showMe = false;
					}
				});
			}
			this.addExpander = function(expander) {
				expanders.push(expander);
			}
		}
	}
});

expModule.directive(&#39;expander&#39;, function() {
	return {
		restrict : &#39;EA&#39;,
		replace : true,
		transclude : true,
		require : &#39;^?accordion&#39;,
		scope : {
			title : &#39;=expanderTitle&#39;
		},
		template : &#39;&amp;lt;div&amp;gt;&#39;
				  + &#39;&amp;lt;div class=&quot;title&quot; ng-click=&quot;toggle()&quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;
				  + &#39;&amp;lt;div class=&quot;body&quot; ng-show=&quot;showMe&quot; ng-transclude&amp;gt;&amp;lt;/div&amp;gt;&#39;
				  + &#39;&amp;lt;/div&amp;gt;&#39;,
		link : function(scope, element, attrs, accordionController) {
			scope.showMe = false;
			accordionController.addExpander(scope);
			scope.toggle = function toggle() {
				scope.showMe = !scope.showMe;
				accordionController.gotOpened(scope);
			}
		}
	}
});

expModule.controller(&quot;SomeController&quot;,function($scope) {
	$scope.expanders = [{
		title : &#39;Click me to expand&#39;,
		text : &#39;Hi there folks, I am the content that was hidden but is now shown.&#39;
	}, {
		title : &#39;Click this&#39;,
		text : &#39;I am even better text than you have seen previously&#39;
	}, {
		title : &#39;Test&#39;,
		text : &#39;test&#39;
	}];
});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;expander&lt;/code&gt;指令中&lt;code&gt;require : &#39;^?accordion&#39;,&lt;/code&gt;依赖外部的&lt;code&gt;accordion&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;link&lt;/code&gt;里面就能接收到第四个参数&lt;code&gt;accordionController&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过参数&lt;code&gt;accordionController&lt;/code&gt;就可以跟外层的指令来进行一些交互，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;accordion&lt;/code&gt;里面通过&lt;code&gt;controller &lt;/code&gt;暴露了一些方法出来，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;controller : function() {
            var expanders = [];
            this.gotOpened = function(selectedExpander) {
                angular.forEach(expanders, function(expander) {
                    if (selectedExpander != expander) {
                        expander.showMe = false;
                    }
                });
            }
            this.addExpander = function(expander) {
                expanders.push(expander);
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样&lt;code&gt;expander&lt;/code&gt;就能通过&lt;code&gt;accordionController&lt;/code&gt;来调用&lt;/p&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-638cd88811aec914.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三方指令库，借助指令库加强开发速度&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-e8904a53139d1d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###指令的运行原理：compile和link&lt;/p&gt;

&lt;p&gt;###总结：ERP类型的系统必备的UI组件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-bac8e6bd7b9951d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;http://miniui.com/&lt;/p&gt;

&lt;p&gt;###总结：互联网/电商型系统必备的UI组件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-186853cf895f76bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###第三方指令库angular-ui&lt;/p&gt;

&lt;p&gt;###Directive思想的起源和原理概述&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:55:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics8.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics8.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-路由 2-5</title>
        <description>&lt;p&gt;###AJAX请求不会留下History历史记录&lt;/p&gt;

&lt;p&gt;在2005年左右，兴起了叫ajax的技术，有了ajax像后台提交数据的时候就不在需要用form表单去提交了，用form表达去提交会导致页面之间的切换，也就是说没法实现单页应用，ajax也有些缺陷，他第一个问题就是不会在浏览器留下历史记录，在一些应用中不留下历史纪录是没有问题的，在一些网络型或许门户型应用没有历史记录用户没有办法保存书签，下次再来访问通过url来访问，发送给别人可能不是想要的状态，&lt;/p&gt;

&lt;p&gt;ajax对SEO是个灾难，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;bookStoreApp&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;BookStore&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;framework/1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;framework/1.3.0.14/angular-route.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;framework/1.3.0.14/angular-animate.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/controllers.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/filters.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/services.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/directives.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ng-view&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var bookStoreApp = angular.module(&#39;bookStoreApp&#39;, [
    &#39;ngRoute&#39;, &#39;ngAnimate&#39;, &#39;bookStoreCtrls&#39;, &#39;bookStoreFilters&#39;,
    &#39;bookStoreServices&#39;, &#39;bookStoreDirectives&#39;
]);

bookStoreApp.config(function($routeProvider) {
    $routeProvider.when(&#39;/hello&#39;, {
        templateUrl: &#39;tpls/hello.html&#39;,
        controller: &#39;HelloCtrl&#39;
    }).when(&#39;/list&#39;,{
    	templateUrl:&#39;tpls/bookList.html&#39;,
    	controller:&#39;BookListCtrl&#39;
    }).otherwise({
        redirectTo: &#39;/hello&#39;
    })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;定义了一个模块，叫做bookStoreApp这个app调用config方法，在方法匿名函数的参数中有一个&lt;code&gt;$routeProvider&lt;/code&gt;这个东西是AngularJS自身所提供的路由机制，通过 &lt;code&gt;$routeProvider&lt;/code&gt;这个东西可以来进行路由的配置，当AngularJS发现浏览器地址栏是hello，就会使用&lt;code&gt;tpls/hello.html&lt;/code&gt;这样一个模板，由  &lt;code&gt;HelloCtrl&lt;/code&gt;控制器来处理模板和 数据之间的绑定。当他url是list的时候就会调用另一个模板和控制器。其他别的所有清况都会直接跳到hello，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$routeProvider&lt;/code&gt;是AngularJS自身提供的机制，需要注意的事AngularJS1.2以后，他把这些机制之间做了一个模块化的处理，也就是说&lt;code&gt;route&lt;/code&gt;没有包含在&lt;code&gt;angular.js&lt;/code&gt;里面，也就是说不在他的核心文件里面，是把他独立出来，成了一个模块，&lt;/p&gt;

&lt;p&gt;所以需要注意的是如果需要使用路由的时候一定要在页面导入这个js&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script src=&quot;framework/1.3.0.14/angular-route.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个路由机制也有毛病，他不能进行深层次嵌套路由的。&lt;/p&gt;

&lt;p&gt;看个例子，这是常见页面的布局方式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-36f8444ac02d4ad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;顶部放导航条，这里面是一级模块的菜单，下面是具体的内容，点击首页的时候是一个比较大的展现，当点击用户管理的时候，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-af6cb82449d86bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-0680ef1d67262e64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他会切分成左右两块区域，&lt;/p&gt;

&lt;p&gt;当点击左边的链接的时候右边的内容会相应发生变化，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-0d9183928b953bbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-d2f896e9bda93d79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一种非常常见的布局方式，用AngularJS本身提供的路由来实现这样的效果是比较麻烦的，有第三方的人开发了一个&lt;code&gt;UIRoute&lt;/code&gt;这样一个东西，&lt;/p&gt;

&lt;p&gt;在github上去收搜https://angular-ui.github.io/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-745c6ffb453263d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UIRoute&lt;/code&gt;提供了一套很好的机制，实现深层次的嵌套，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;routerApp&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/angular-animate.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/angular-ui-router.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;UIRoute3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ui-view&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先需要把&lt;code&gt; &amp;lt;script src=&quot;js/angular-ui-router.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;下载下来，导入到页面里面去，导入了&lt;code&gt;ui-router&lt;/code&gt;以后就不需要AngularJS原生的&lt;code&gt;router&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在写法上也会发生些变化&lt;/p&gt;

&lt;p&gt;在页面上&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;


&amp;lt;body&amp;gt;
    &amp;lt;div ui-view&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;code&gt;ui-view&lt;/code&gt;这个指令，这个表示是一个视图，&lt;/p&gt;

&lt;p&gt;来看js代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var routerApp = angular.module(&#39;routerApp&#39;, [&#39;ui.router&#39;]);
routerApp.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise(&#39;/index&#39;);
    $stateProvider
        .state(&#39;index&#39;, {
            url: &#39;/index&#39;,
            views: {
                &#39;&#39;: {
                    templateUrl: &#39;tpls3/index.html&#39;
                },
                &#39;topbar@index&#39;: {
                    templateUrl: &#39;tpls3/topbar.html&#39;
                },
                &#39;main@index&#39;: {
                    templateUrl: &#39;tpls3/home.html&#39;
                }
            }
        })
        .state(&#39;index.usermng&#39;, {
            url: &#39;/usermng&#39;,
            views: {
                &#39;main@index&#39;: {
                    templateUrl: &#39;tpls3/usermng.html&#39;,
                    controller: function($scope, $state) {
                        $scope.addUserType = function() {
                            $state.go(&quot;index.usermng.addusertype&quot;);
                        }
                    }
                }
            }
        })
        .state(&#39;index.usermng.highendusers&#39;, {
            url: &#39;/highendusers&#39;,
            templateUrl: &#39;tpls3/highendusers.html&#39;
        })
        .state(&#39;index.usermng.normalusers&#39;, {
            url: &#39;/normalusers&#39;,
            templateUrl: &#39;tpls3/normalusers.html&#39;
        })
        .state(&#39;index.usermng.lowusers&#39;, {
            url: &#39;/lowusers&#39;,
            templateUrl: &#39;tpls3/lowusers.html&#39;
        })
        .state(&#39;index.usermng.addusertype&#39;, {
            url: &#39;/addusertype&#39;,
            templateUrl: &#39;tpls3/addusertypeform.html&#39;,
            controller: function($scope, $state) {
                $scope.backToPrevious = function() {
                    window.history.back();
                }
            }
        })
        .state(&#39;index.permission&#39;, {
            url: &#39;/permission&#39;,
            views: {
                &#39;main@index&#39;: {
                    template: &#39;这里是权限管理&#39;
                }
            }
        })
        .state(&#39;index.report&#39;, {
            url: &#39;/report&#39;,
            views: {
                &#39;main@index&#39;: {
                    template: &#39;这里是报表管理&#39;
                }
            }
        })
        .state(&#39;index.settings&#39;, {
            url: &#39;/settings&#39;,
            views: {
                &#39;main@index&#39;: {
                    template: &#39;这里是系统设置&#39;
                }
            }
        })
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和之前AngularJS的route是大同小异的，&lt;/p&gt;

&lt;p&gt;只是说不再去使用&lt;code&gt;$routeProvider&lt;/code&gt;了&lt;/p&gt;

&lt;p&gt;换成&lt;code&gt;$stateProvider, $urlRouterProvider&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;和之前AngularJS的route&lt;code&gt;$routeProvider&lt;/code&gt;写法非常相似，但是他定义的方法名叫&lt;code&gt;state&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先调用&lt;code&gt;$stateProvider&lt;/code&gt;上面的&lt;code&gt;state&lt;/code&gt;方法，来配置当地址栏里面发生什么样的变化的时候，就去使用哪一个模板，这里有很多比较快捷的语法，比如说&lt;code&gt;index&lt;/code&gt;页面实现逻辑&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;.state(&#39;index&#39;, {
            url: &#39;/index&#39;,
            views: {
                &#39;&#39;: {
                    templateUrl: &#39;tpls3/index.html&#39;
                },
                &#39;topbar@index&#39;: {
                    templateUrl: &#39;tpls3/topbar.html&#39;
                },
                &#39;main@index&#39;: {
                    templateUrl: &#39;tpls3/home.html&#39;
                }
            }
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码，state状态是index时候就去执行，url参数是/index，找index代码片段，&lt;/p&gt;

&lt;p&gt;定义了几个&lt;code&gt;views&lt;/code&gt;其实有三个view，我们把页面分成了两个部分顶部是一个导航条，然后下面的内容是会跟着去切换的，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;                &#39;&#39;: {
                    templateUrl: &#39;tpls3/index.html&#39;
                },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;顶部写一个空的字符串，然后用tpls3下面的index.html来作为我们主页的html模板，&lt;/p&gt;

&lt;p&gt;index.html文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div ui-view=&quot;topbar&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div ui-view=&quot;main&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个html文件里面，又把路由分成了两块，一个topbar一个main，这是主区域，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;.state(&#39;index&#39;, {
            url: &#39;/index&#39;,
            views: {
                &#39;&#39;: {
                    templateUrl: &#39;tpls3/index.html&#39;
                },
                &#39;topbar@index&#39;: {
                    templateUrl: &#39;tpls3/topbar.html&#39;
                },
                &#39;main@index&#39;: {
                    templateUrl: &#39;tpls3/home.html&#39;
                }
            }
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt; &#39;topbar@index&#39;: &lt;/code&gt;,&lt;code&gt;&#39;main@index&#39;: &lt;/code&gt;这两个的意思就是index模块中分的两个ui-view，还给他命名了叫做topbar，main&lt;/p&gt;

&lt;p&gt;通过@这种语法就会自动去知道每一个小的小块去加载对应的模板，&lt;/p&gt;

&lt;p&gt;其他的切分方式，和上面都大同小异，当然他还有一些比较方便的语法，比如说用点号&lt;code&gt;.&lt;/code&gt;来分隔这种子模块，子区域，有了ui-router就可以做深层次路由的嵌套，包括一个页面上面分成多个区域，多个区域都可以定义匿名的ui-router，这样可以只切换一小块区域，而不是整个都去切换，&lt;/p&gt;

&lt;p&gt;###前端路由的基本原理&lt;/p&gt;

&lt;p&gt;###哈希#&lt;/p&gt;

&lt;p&gt;以前通过a标签有一个叫锚点的机制，锚点是点一个链接他不会页面与页面之间进行跳转，他会在页内导航，后来就有人发现我们可以通过这样一个机制让浏览器不刷新页面而实现url地址的变化，url地址变了以后浏览器不会去刷洗页面，通过锚点这种方式进行了封装，这是比较老的浏览器都可以支持的。&lt;/p&gt;

&lt;p&gt;###html5中新的history API&lt;/p&gt;

&lt;p&gt;可以通过js代码去修改浏览器地址栏地址，这样浏览器会留下历史纪录，但是页面不会跳转，这是新的html5提供的。一般来说通过这种小的工具库都会封装这种方式从而实现向下兼容，&lt;/p&gt;

&lt;p&gt;###路由的核心是给应用定义状态&lt;/p&gt;

&lt;p&gt;###使用路由机制会影响整个应用编码的方式。&lt;/p&gt;

&lt;p&gt;这种概念和传统开发的方式会有一些思路上的不同，也就是说你用路由的时候实际上你一定要为你的应用先把这些状态都定义好，通过哪一个地址进入哪一种状态都预先定义好，会影响整个应用编码的方式。&lt;/p&gt;

&lt;p&gt;###考虑兼容性问题与“优雅降级”&lt;/p&gt;

&lt;p&gt;一般比较完善的路由库，都会提供兼容性的处理，会帮你去检测浏览器的版本如果发现使用比较低版本浏览器ie这些，会自动帮你使用哈希这种方式，如果发下是新的浏览器就会使用html5  history API去操作。&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:54:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics7.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics7.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-双向数据绑定 2-4</title>
        <description>&lt;p&gt;双向数据绑定指的是两个方向，这两个方向指的是从视图到数据模型，AngularJS是MVC框架，程序主要是通过控制器进行操作的，控制器去修改数据模型，数据模型的变更会反应到视图上。视图上面如果发生了数据变化AngularJS框架会同步到数据模型中。&lt;/p&gt;

&lt;p&gt;###简单例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;HelloAngular&quot;&amp;gt;
            &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_MVC.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function HelloAngular($scope) {
    $scope.greeting = {
        text: &#39;Hello&#39;
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html页面中p标签的双花口号是一个取值表达式，&lt;/p&gt;

&lt;p&gt;这个页面有一个问题，如果刷新页面在网络不好的情况下可能会看到``&lt;/p&gt;

&lt;p&gt;###取值表达式与ng-bind指令&lt;/p&gt;

&lt;p&gt;AngularJS提供了一个叫ng-bind指令来避免上面出现取值表达式的问题，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;HelloAngular&quot;&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;span ng-bind=&quot;greeting.text&quot;&amp;gt;&amp;lt;/span&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_MVC.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function HelloAngular($scope) {
    $scope.greeting = {
        text: &#39;Hello&#39;
    };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用ng-bind指令不会出现取值表达式的问题&lt;/p&gt;

&lt;p&gt;在``取值表达式和&lt;code&gt;ng-bind&lt;/code&gt;间如何取舍，什么时候该使用哪个呢？&lt;/p&gt;

&lt;p&gt;AngularJS本身的库在记载完以后整个页面就归AngularJS来管了这个时候使用``绑定的方式呢就不会有很大的问题。&lt;/p&gt;

&lt;p&gt;也就是说在应用主程序index中如果有数据绑定，使用&lt;code&gt;ng-bind&lt;/code&gt;去绑定，一般在导入ng核心库的时候一般都是放在index上面，一般不会在内层去加载ng核心库，所以后续的页面通过模板加载进来的页面使用``绑定就ok了。这样是不会堪当表达式的。&lt;/p&gt;

&lt;p&gt;在什么情况下会需要视图会修改值，然后导致去改变数据模型呢？&lt;/p&gt;

&lt;p&gt;典型的场景就是form表单，form是让用户可以交互和输入的。&lt;/p&gt;

&lt;p&gt;###双向绑定的经典场景&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;UserInfoModule&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap-3.0.0/css/bootstrap.css&quot;&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;Form.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
            &amp;lt;div class=&quot;panel-title&quot;&amp;gt;双向数据绑定&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-12&quot;&amp;gt;
                    &amp;lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; ng-controller=&quot;UserInfoCtrl&quot;&amp;gt;
                        &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                            &amp;lt;label class=&quot;col-md-2 control-label&quot;&amp;gt;
                                邮箱：
                            &amp;lt;/label&amp;gt;
                            &amp;lt;div class=&quot;col-md-10&quot;&amp;gt;
                                &amp;lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;推荐使用126邮箱&quot; ng-model=&quot;userInfo.email&quot;&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                            &amp;lt;label class=&quot;col-md-2 control-label&quot;&amp;gt;
                                密码：
                            &amp;lt;/label&amp;gt;
                            &amp;lt;div class=&quot;col-md-10&quot;&amp;gt;
                                &amp;lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;只能是数字、字母、下划线&quot; ng-model=&quot;userInfo.password&quot;&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                            &amp;lt;div class=&quot;col-md-offset-2 col-md-10&quot;&amp;gt;
                                &amp;lt;div class=&quot;checkbox&quot;&amp;gt;
                                    &amp;lt;label&amp;gt;
                                        &amp;lt;input type=&quot;checkbox&quot; ng-model=&quot;userInfo.autoLogin&quot;&amp;gt;自动登录
                                    &amp;lt;/label&amp;gt;
                                &amp;lt;/div&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class=&quot;form-group&quot;&amp;gt;
                            &amp;lt;div class=&quot;col-md-offset-2 col-md-10&quot;&amp;gt;
                                &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;getFormData()&quot;&amp;gt;获取Form表单的值&amp;lt;/button&amp;gt;
                                &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;setFormData()&quot;&amp;gt;设置Form表单的值&amp;lt;/button&amp;gt;
                                &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;resetForm()&quot;&amp;gt;重置表单&amp;lt;/button&amp;gt;
                            &amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/form&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var userInfoModule = angular.module(&#39;UserInfoModule&#39;, []);
userInfoModule.controller(&#39;UserInfoCtrl&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.userInfo = {
            email: &quot;1319639755@qq.com&quot;,
            password: &quot;253445528&quot;,
            autoLogin: true
        };
        $scope.getFormData = function() {
            console.log($scope.userInfo);
        };
        $scope.setFormData = function() {
            $scope.userInfo = {
                email: &#39;2254513188@qq.com&#39;,
                password: &#39;damoqiongqiu&#39;,
                autoLogin: false
            }
        };
        $scope.resetForm = function() {
            $scope.userInfo = {
                email: &quot;1319639755@qq.com&quot;,
                password: &quot;253445528&quot;,
                autoLogin: true
            };
        }
    }
])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;预览&lt;/p&gt;

&lt;p&gt;以上代码创建模块，这个模块不以来任何东西，所以数组是空，&lt;/p&gt;

&lt;p&gt;有了模块需要建立一个控制器由控制器来控制数据模型和视图，UserInfoCtrl，这个控制器放在了form上。&lt;/p&gt;

&lt;p&gt;在$scope上赋一个对象userInfo，定义好登入需要的一些信息，&lt;/p&gt;

&lt;p&gt;然后回到html绑定值，使用&lt;code&gt;ng-model&lt;/code&gt;绑定值。&lt;/p&gt;

&lt;p&gt;这样这些输入项就和数据模型绑定起来了，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-82bd9a11cb4bf7a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在$scope上建立getFormData方法，打印userInfo的数据&lt;/p&gt;

&lt;p&gt;如何调用$scope上的方法呢？在页面按钮标签使用ng-click=”getFormData()”指令，就可以去执行$scope上的方法。&lt;/p&gt;

&lt;p&gt;点击获取数据按钮，就会打印userInfo的数据&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-abf7291aa79db6c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果我修改了input上面的值会不会同步到数据模型中去，也就是$scope.userInfo对象上面去。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-f52a5f1453cc0b03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;答案是数据修改了，也就是说视图上的修改会自动同步到数据模型上面去，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;        $scope.setFormData = function() {
            $scope.userInfo = {
                email: &#39;2254513188@qq.com&#39;,
                password: &#39;damoqiongqiu&#39;,
                autoLogin: false
            }
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以通过程序修改数据模型，视图同步改变。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;        $scope.resetForm = function() {
            $scope.userInfo = {
                email: &quot;1319639755@qq.com&quot;,
                password: &quot;253445528&quot;,
                autoLogin: true
            };
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重置表单&lt;/p&gt;

&lt;p&gt;###动态切换标签样式&lt;/p&gt;

&lt;p&gt;双向数据绑定还可以用在修改样式上面，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.text-red {
    background-color: #ff0000;
}
.text-green {
    background-color: #00ff00;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyCSSModule&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;CSS1.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ng-controller=&quot;CSSCtrl&quot;&amp;gt;
        &amp;lt;p class=&quot;text-&quot;&amp;gt;测试CSS样式&amp;lt;/p&amp;gt;
        &amp;lt;button class=&quot;btn btn-default&quot; ng-click=&quot;setGreen()&quot;&amp;gt;绿色&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;CSS1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myCSSModule = angular.module(&#39;MyCSSModule&#39;, []);
myCSSModule.controller(&#39;CSSCtrl&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.color = &quot;red&quot;;
        $scope.setGreen = function() {
            $scope.color = &quot;green&quot;;
        }
    }
])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-b87f5c300e937b90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-7d121bcbb2d33299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###ng-class&lt;/p&gt;

&lt;p&gt;这种方式有一个问题，真实项目中标签结构很复杂，如果里面的值取错了，或者说没有值，取成了null，就会发生一些比较诡异的情况。&lt;/p&gt;

&lt;p&gt;为了避免这种状况AngularJS提供了&lt;code&gt;ng-class&lt;/code&gt;指令，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ng-class&lt;/code&gt;和原生的class是有去别的，它支持是可以接收一些表达式的  。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.error {
    background-color: red;
}
.warning {
    background-color: yellow;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyCSSModule&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;NgClass.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ng-controller=&#39;HeaderController&#39;&amp;gt;
        &amp;lt;div ng-class=&#39;{error: isError, warning: isWarning}&#39;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;button ng-click=&#39;showError()&#39;&amp;gt;Simulate Error&amp;lt;/button&amp;gt;
        &amp;lt;button ng-click=&#39;showWarning()&#39;&amp;gt;Simulate Warning&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;NgClass.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myCSSModule = angular.module(&#39;MyCSSModule&#39;, []);
myCSSModule.controller(&#39;HeaderController&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.isError = false;
        $scope.isWarning = false;
        $scope.showError = function() {
            $scope.messageText = &#39;This is an error!&#39;;
            $scope.isError = true;
            $scope.isWarning = false;
        };
        $scope.showWarning = function() {
            $scope.messageText = &#39;Just a warning. Please carry on.&#39;;
            $scope.isWarning = true;
            $scope.isError = false;
        };
    }
])


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div ng-class=&#39;{error: isError, warning: isWarning}&#39;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这行代码使用了ng-class，他是一个表达式，如果isError的值是true他就会用error这个样式，如果isWarning的值是true他就会用warning这个样式，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myCSSModule = angular.module(&#39;MyCSSModule&#39;, []);
myCSSModule.controller(&#39;HeaderController&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.isError = false;
        $scope.isWarning = false;
        $scope.showError = function() {
            $scope.messageText = &#39;This is an error!&#39;;
            $scope.isError = true;
            $scope.isWarning = false;
        };
        $scope.showWarning = function() {
            $scope.messageText = &#39;Just a warning. Please carry on.&#39;;
            $scope.isWarning = true;
            $scope.isError = false;
        };
    }
])


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段js代码中一开始是两个值都是false，底下两个按钮分别执行两个不同的方法，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-db03e31ad10d53a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-42fe859ab7c03db4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###ng-show和ng-hide&lt;/p&gt;

&lt;p&gt;控制一个标签的显示和隐藏，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyCSSModule&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ng-controller=&#39;DeathrayMenuController&#39;&amp;gt;
        &amp;lt;button ng-click=&#39;toggleMenu()&#39;&amp;gt;Toggle Menu&amp;lt;/button&amp;gt;
        &amp;lt;ul ng-show=&#39;menuState.show&#39;&amp;gt;
            &amp;lt;li ng-click=&#39;stun()&#39;&amp;gt;Stun&amp;lt;/li&amp;gt;
            &amp;lt;li ng-click=&#39;disintegrate()&#39;&amp;gt;Disintegrate&amp;lt;/li&amp;gt;
            &amp;lt;li ng-click=&#39;erase()&#39;&amp;gt;Erase from history&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;div/&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;NgShow.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/html&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myCSSModule = angular.module(&#39;MyCSSModule&#39;, []);
myCSSModule.controller(&#39;DeathrayMenuController&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.menuState={show:false};
        $scope.toggleMenu = function() {
            $scope.menuState.show = !$scope.menuState.show;
        };
    }
])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子是点击按钮切换列表项的显示状态，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ul ng-show=&#39;menuState.show&#39;&amp;gt;&lt;/code&gt; menuState.show这个模型的值&lt;/p&gt;

&lt;p&gt;按钮点击运行toggleMenu方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
        $scope.toggleMenu = function() {
            $scope.menuState.show = !$scope.menuState.show;
        };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每次运行都会区一个和之前相反的值，也就是区非。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-2a4e3ac74b9035cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-0659ed51cec68907.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一种开关效果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ng-hide是和ng-show是想反的动作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;###ngAnimate&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:52:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics6.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics6.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-路由，模块，依赖注入 2-3</title>
        <description>&lt;p&gt;###AngularJS的模块化实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;HelloAngular&quot;&amp;gt;
            &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_MVC.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function HelloAngular($scope) {
    $scope.greeting = {
        text: &#39;Hello&#39;
    };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码有一个p标签里面有一个双花括号的取值表达式，&lt;/p&gt;

&lt;p&gt;js代码是一个很简单的函数这个函数里面有一个$scope的参数，在他上面去赋值，AngularJS就可以取到对应的值。&lt;/p&gt;

&lt;p&gt;其实上面的代码是不够模块化的，因为写了一个全局的函数，这不符合模块化，会污染全局空间，可以这样写。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;HelloAngular&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;helloNgCtrl&quot;&amp;gt;
            &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;NgModule1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var helloModule=angular.module(&#39;HelloAngular&#39;, []);
helloModule.controller(&#39;helloNgCtrl&#39;, [&#39;$scope&#39;, function($scope){
	$scope.greeting = {
        text: &#39;Hello&#39;
    };
}]);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的js利用angular的module方法去定义一个模块，定义一个名为HelloAngular的模块，定义完之后在模块的实例上面去调用controller方法，来创建一个名为helloNgCtrl的控制器，后面是一个方括号，是一个数组，第一个参数是一个字符串’$scope’，第二个参数是一个函数，这个函数实际上和之前写的HelloAngular函数内容是一模一样的，只不过这个函数是一个匿名函数，以上代码就是AngularJS实现模块化的一个方法。&lt;/p&gt;

&lt;p&gt;###一个完整的项目结构是什么样子的？—实例演示&lt;/p&gt;

&lt;p&gt;使用模块化有什么好处呢？AngularJS里面的模块又是什么东西呢，更具官方的定义，AngularJS里面的模块实际上他是一个集合，就相当于一个框子，他是由模型，视图，控制器，过滤器，服务，等等。。。把他组合到一起实现某一个功能那么他就叫一个模块。&lt;/p&gt;

&lt;p&gt;有了AngularJS模块化工具之后一个真实的项目他的目录结构是什么样子的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-61b011c81442379d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;假设有一个叫BookStore这样一个应用app，&lt;/p&gt;

&lt;p&gt;先来看一级的结构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-bf48adc3d68a87c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;package.json其实是给mpm，node.js工具去用的，如果不想用是可以不要的，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-75010b346a5c9c5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;node_modules这个东西是我们用npm也就是说node的模块管理器，去装一些插件的时候他自动生成的，所有的插件都会装入这个目录下面，一般来说在开发一个项目的时候会把nodejs下面的工具都直接安装在项目的目录下面同时会把这东西直接提交到版本控制工具中，这样做是为了大家版本一直，避免版本冲突。&lt;/p&gt;

&lt;p&gt;其他代码都房子app目录下面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-544272cfa01c20c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个目录下面分成几个小目录，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;framework&lt;/strong&gt;目录    这个目录下面我们不止放AngularJS，可能还有Bootstrap获取还有其他的ui控件，都可以放在这个下面，便于管理和组织，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tpls&lt;/strong&gt;目录用来放模板，就是是说一些html片段，把他抽成一个小片段，什么叫html片段呢？实际上就是一段不完整的html的结构，他是没有html根标签，也没有body和其他的东西，就是其中的一小块，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li ng-repeat=&quot;book in books&quot;&amp;gt;
        书名:   作者:
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上就像晓得零件这个片段会被我们的控制器加载进来，然后控制器把数据传递给他，形成一些真实的html标签，就会插入到问道流中去。&lt;/p&gt;

&lt;p&gt;一个应为会有一个主文件，叫做index，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;bookStoreApp&quot;&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;BookStore&amp;lt;/title&amp;gt;
    &amp;lt;script src=&quot;framework/1.3.0.14/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;framework/1.3.0.14/angular-route.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;framework/1.3.0.14/angular-animate.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/app.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/controllers.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/filters.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/services.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;js/directives.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div ng-view&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个index来加载一些js文件，&lt;/p&gt;

&lt;p&gt;放一个根的视图叫做&lt;strong&gt;ng-view&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
    &amp;lt;div ng-view&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也就是说充当视图最根的一个容器，通过这个根容器可以实现跟多的功能，&lt;/p&gt;

&lt;p&gt;所有的js代码是放在js目录下，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-6379adcd581c1eaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般来说这些js名称是预定熟成的，&lt;/p&gt;

&lt;p&gt;app.js 作为启动点的js&lt;/p&gt;

&lt;p&gt;controllers.js  说明这个文件方的是多个控制器，而不是一个，&lt;/p&gt;

&lt;p&gt;directives.js 指令js&lt;/p&gt;

&lt;p&gt;filters.js  过滤器&lt;/p&gt;

&lt;p&gt;services.js  服务&lt;/p&gt;

&lt;p&gt;还可以有route路由获取其他&lt;/p&gt;

&lt;p&gt;###使用ng-Route进行视图之间的路由&lt;/p&gt;

&lt;p&gt;通过不同的url来访问不同的viel&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-1739525f4c619432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-6f6f8e2b302980ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-8e01f7564aaad999.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过路由$routeProvider来实现不同url访问不同的viel,一个应用里面有很多的视图，那么怎么判断哪个url对应哪个视图呢？AngularJS提供了叫$routeProvider，从字面意义上知道这是路由，他会根据访问的路径不同展示不同的viel，这是$routeProvider基本的功能，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-42a29fe2f9b66aad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当我们访问hello的时候他就会就是使用templateUrl模板url去找到模板片段tpls下面的hello.html片段，作为他的模板controller: ‘HelloCtrl’意识是使用HelloCtrl控制器去处理整个视图的生成，&lt;/p&gt;

&lt;p&gt;Angular路由的意思就是根据地址栏里面的url不同他去帮我们展现不同的视图，这个视图是由控制器去负责生成出来的，&lt;/p&gt;

&lt;p&gt;$routeProvider有两个方法一个是when一个是otherwise，otherwise是不是when定义的情况下发生。&lt;/p&gt;

&lt;p&gt;会发现AngularJS路由生成页面会有个#/list，有一个#号，这个#号是为了防止浏览器像后台提交请求，使用#号实际上就是内部的锚点，这样的话浏览器不会向服务端发请求。这样的写法其实是告诉浏览器在页面内进行跳转，AngularJS会拦截到url地址，他会去把#号后面的内容取出来，取出来后来跟$routeProvider里面所写的内容进行匹配，这样他就知道去展现哪个视图。&lt;/p&gt;

&lt;p&gt;有了这个东西就可以把不同的视图交给不同的控制器去处理这样就能把视图之间的职能分的很清楚，可以用很多的控制器来处理不同的视图不同的内容。&lt;/p&gt;

&lt;p&gt;###一切都是从模块开始的&lt;/p&gt;

&lt;p&gt;再来看看&lt;strong&gt;controllers.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var bookStoreCtrls = angular.module(&#39;bookStoreCtrls&#39;, []);

bookStoreCtrls.controller(&#39;HelloCtrl&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.greeting = {
            text: &#39;Hello&#39;
        };
    }
]);

bookStoreCtrls.controller(&#39;BookListCtrl&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.books =[
        	{title:&quot;《Ext江湖》&quot;,author:&quot;大漠穷秋&quot;},
        	{title:&quot;《ActionScript游戏设计基础（第二版）》&quot;,author:&quot;大漠穷秋&quot;},
        	{title:&quot;《用AngularJS开发下一代WEB应用》&quot;,author:&quot;大漠穷秋&quot;}
        ]
    }
]);

/**
 * 这里接着往下写，如果控制器的数量非常多，需要分给多个开发者，可以借助于grunt来合并代码
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先来看hello&lt;/p&gt;

&lt;p&gt;首先要定义一个模块&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var bookStoreCtrls = angular.module(&#39;bookStoreCtrls&#39;, []);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;bookStoreCtrls 模块有一个HelloCtrl名称的controller，也就是HelloCtrl名称的控制器，&lt;/p&gt;

&lt;p&gt;打开根目录浏览器预览如果什么都不输会自动跳入app/index.html#/hello&lt;/p&gt;

&lt;p&gt;这是因为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;bookStoreApp.config(function($routeProvider) {
    $routeProvider.when(&#39;/hello&#39;, {
        templateUrl: &#39;tpls/hello.html&#39;,
        controller: &#39;HelloCtrl&#39;
    }).when(&#39;/list&#39;,{
    	templateUrl:&#39;tpls/bookList.html&#39;,
    	controller:&#39;BookListCtrl&#39;
    }).otherwise({
        redirectTo: &#39;/hello&#39;
    })
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为otherwise意思就是说如果不满足上面所有的情况，就会跳到 redirectTo: ‘/hello’这样一个路径上去，跳到这个路径上就会归controller: ‘HelloCtrl’来管理了，&lt;/p&gt;

&lt;p&gt;controller: ‘HelloCtrl’它什么都没做，只是往$scope.greeting上面赋了一个对象&lt;/p&gt;

&lt;p&gt;templateUrl: ‘tpls/hello.html’,使用模板的路径加载一个hello.html片段&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模板加载进来之后就会获得控制器上所赋的对象的值，获得值以后会拼接成一个完整的html然后把他插入到index里面，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
    &amp;lt;div ng-view&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;插入到index里面写的ng-view里面去，显示结果。&lt;/p&gt;

&lt;p&gt;再来看BookListCtrl控制器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;bookStoreCtrls.controller(&#39;BookListCtrl&#39;, [&#39;$scope&#39;,
    function($scope) {
        $scope.books =[
        	{title:&quot;《Ext江湖》&quot;,author:&quot;大漠穷秋&quot;},
        	{title:&quot;《ActionScript游戏设计基础（第二版）》&quot;,author:&quot;大漠穷秋&quot;},
        	{title:&quot;《用AngularJS开发下一代WEB应用》&quot;,author:&quot;大漠穷秋&quot;}
        ]
    }
]);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个控制器在$scope.books上赋值了一个数组这个数组包含这对象，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;.when(&#39;/list&#39;,{
        templateUrl:&#39;tpls/bookList.html&#39;,
        controller:&#39;BookListCtrl&#39;
    }).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在路由中的&lt;code&gt;/list&lt;/code&gt;使用&lt;code&gt;&#39;tpls/bookList.html&#39;&lt;/code&gt;来作为模板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li ng-repeat=&quot;book in books&quot;&amp;gt;
        书名:   作者:
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个模板使用&lt;code&gt; ng-repeat&lt;/code&gt;迭代数组的指令来迭代books数组，从而生成列表，&lt;/p&gt;

&lt;p&gt;当访问&lt;code&gt;list&lt;/code&gt;的时候也就说明&lt;code&gt;BookListCtrl&lt;/code&gt;控制器去管理了，从而成了列表结构现在在视图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-b4cbab482dfd5654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果应用里面还有其他的控制器，可以继续在&lt;code&gt;controllers.js&lt;/code&gt;里继续往下写，&lt;/p&gt;

&lt;p&gt;###ng官方推荐的模块切分方式是什么？&lt;/p&gt;

&lt;p&gt;在项目开发时，可能有很多人来共同完成这个项目，这个时候不可能大家一起来改一个文件，改一个文件很容易冲突，这个时候有两种方式，&lt;/p&gt;

&lt;p&gt;一种方式是使用代码合并和混淆工具grunt工具让大家开发完成以后自动合并成一个文件，意思是都合并到&lt;code&gt;controllers.js&lt;/code&gt;文件中来。&lt;/p&gt;

&lt;p&gt;另一种方式是可以定义多个模块，可以定义多个模块，&lt;/p&gt;

&lt;p&gt;多个模块如何实现加载呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-d8582da9c1253cb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var bookStoreApp = angular.module(&#39;bookStoreApp&#39;, [
    &#39;ngRoute&#39;, &#39;ngAnimate&#39;, &#39;bookStoreCtrls&#39;, &#39;bookStoreFilters&#39;,
    &#39;bookStoreServices&#39;, &#39;bookStoreDirectives&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码使用了官方推荐的模块切分的方式，也就是说把控制器，指令，过滤器，服务等。。。分别定义成一个或者多个js文件，这个时候提供一个入口点&lt;code&gt;app.js&lt;/code&gt;，这个&lt;code&gt;app.js&lt;/code&gt;定义一个模块module，这个模块module作为启动点，他实际上没有太多的功能，只是说告诉AngularJS我依赖哪一些模块，然后加一个路由的配置的功能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var bookStoreApp = angular.module(&#39;bookStoreApp&#39;, [
    &#39;ngRoute&#39;, &#39;ngAnimate&#39;, &#39;bookStoreCtrls&#39;, &#39;bookStoreFilters&#39;,
    &#39;bookStoreServices&#39;, &#39;bookStoreDirectives&#39;
]);

bookStoreApp.config(function($routeProvider) {
    $routeProvider.when(&#39;/hello&#39;, {
        templateUrl: &#39;tpls/hello.html&#39;,
        controller: &#39;HelloCtrl&#39;
    }).when(&#39;/list&#39;,{
    	templateUrl:&#39;tpls/bookList.html&#39;,
    	controller:&#39;BookListCtrl&#39;
    }).otherwise({
        redirectTo: &#39;/hello&#39;
    })
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式是AngularJS官方所推荐的方式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-12a3aa683a7570f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AngularJS官方所推荐的方式就是说我用一个总的&lt;code&gt;app&lt;/code&gt;的模块作为总的入口点，这个模块他依赖于&lt;code&gt;controllers&lt;/code&gt;,&lt;code&gt;directives&lt;/code&gt;,&lt;code&gt;filters&lt;/code&gt;,&lt;code&gt;services&lt;/code&gt;,&lt;code&gt;routes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-5985ae08587319be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图可见&lt;code&gt;bookStoreApp&lt;/code&gt;模块是作为项目的启动点的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-57e6d4510cf10dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以在index里面看到ng-app作为启动点&lt;/p&gt;

&lt;p&gt;ng-app这个指令的时候就知道我从ng-app这个指令开始内部的标签内容就归我Angular js来管了，也就是说Angular js从ng-app这个地方启动的，可以想象既然是main函数main方法，一个应用里面显然只能有一个，所以在任意一个单页Angular js应用里面ng-app这个指令只能出现一次。&lt;/p&gt;

&lt;p&gt;AngularJS在加载完以后会来找ng-app这个指令，一个单页Angular js应用里面ng-app这个指令只能出现一次。他是一个main方法。&lt;/p&gt;

&lt;p&gt;AngularJS找到了这个指令以后呢就会尝试执行这个启动点的模块&lt;code&gt;bookStoreApp&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-1d6094a93e3b1639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后他就会发现这个启动点的模块还依赖这么多东西，他就会等待这些东西加载完成。&lt;/p&gt;

&lt;p&gt;如果使用到更多的模块要在起点模块中注册依赖。&lt;/p&gt;

&lt;p&gt;###模块之间的互相依赖怎么做？—依赖注入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var bookStoreApp = angular.module(&#39;bookStoreApp&#39;, [
    &#39;ngRoute&#39;, &#39;ngAnimate&#39;, &#39;bookStoreCtrls&#39;, &#39;bookStoreFilters&#39;,
    &#39;bookStoreServices&#39;, &#39;bookStoreDirectives&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bookStoreApp &lt;/code&gt;模块之间这种依赖的方式写的是一个字符串，那么AngularJS是怎么知道你是这样一个依赖关系呢？&lt;/p&gt;

&lt;p&gt;这个就要借助于AngularJS叫做依赖注入的一个机制，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var bookStoreApp = angular.module(&#39;bookStoreApp&#39;, [
    &#39;ngRoute&#39;, &#39;ngAnimate&#39;, &#39;bookStoreCtrls&#39;, &#39;bookStoreFilters&#39;,
    &#39;bookStoreServices&#39;, &#39;bookStoreDirectives&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然注入写的是字符串，但是AngularJS在启动的时候她回去检测，检测字符串和对于的模块到底有没有注册或者说有没有被加载进来，如果你写一个模块没有的话AngularJS是会报错的，AngularJS内部的依赖注入是这样去做的。&lt;/p&gt;

&lt;p&gt;需要知道如果你需要依赖一些模块，你只要在后面的方括号数组里面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-69867d5d9f418e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以ng开头的是AngularJS自身所提供的模块，’ngRoute’ru’路由, ‘ngAnimate动画’,&lt;/p&gt;

&lt;p&gt;AngularJS自身都提供了哪些模块呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-767c23454b933eb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;angular-animate.js动画&lt;/p&gt;

&lt;p&gt;angular-mocks.js是用来做单元测试写一些假数据&lt;/p&gt;

&lt;p&gt;angular-scenario.js场景测试集成测试会依赖他&lt;/p&gt;

&lt;p&gt;angular-touch.js支持移动上面的开发手机版本的开发&lt;/p&gt;

&lt;p&gt;这么多模块，根据项目需求去选择&lt;/p&gt;

&lt;p&gt;但是核心的&lt;code&gt;angular.js&lt;/code&gt;是必须加载进来的&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:50:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics5.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics5.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-MVC 2-2</title>
        <description>&lt;p&gt;###如何复用Model?&lt;/p&gt;

&lt;p&gt;数据模型也就是Model，在AngularJS里面是怎么实现的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot; ng-app&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;input type=&quot;text&quot; ng-model=&quot;greeting.text&quot;/&amp;gt;
        &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码写了一个input输入框，这个里面通过ng-model这样一个指令生成一个数据模型，这个数据模型他的结构是greeting.text，在下面的p标签里面通过花括号来取值，获得greeting.text这个模型的值，&lt;br /&gt;
这个是Angular JS里面实现数据模型的一种方式，运行的效果是input进行输入的时候p标签会实时的去更新，p标签里面的内容实际上是绑定了ng-model相同的内容上面，这个例子里面实际上是没有写任何一段js代码的。&lt;/p&gt;

&lt;p&gt;Angular JS 首先会在Angular JS加载完成之后他会启动，启动完了以后首先去找ng-app这个指令，找到这个指令他就认为ng-app这个标签内部所有的内容都归Angular JS去管，这个时候她就回去找子层表情所有的指令，对他进行编译操作，这个时候他就会找到ng-model，找到ng-model后会帮我们生成一个数据模型，这个数据模型是挂在所谓的$rootscope上面，也就是根作用域上面的，所以ng-app下面的所有子层标签任意一个层级上都可以去获取这样一个值。&lt;/p&gt;

&lt;p&gt;Angular JS里面的数据模型一般来说是不需要你自己手动去创建的，也就是说你不需要明确的去new一个model这样一个东西，Angular JS里面的数据模型他一般都是绑定在$scope这样一个对象上面的，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;HelloAngular&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;Commoncontroller&quot;&amp;gt;
            &amp;lt;!-- ng-controller控制器 --&amp;gt;
            &amp;lt;div ng-controller=&quot;Controller1&quot;&amp;gt;
                &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
                &amp;lt;button ng-click=&quot;test1()&quot;&amp;gt;test1&amp;lt;/button&amp;gt;
                &amp;lt;button ng-click=&quot;commonFn()&quot;&amp;gt;通用&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div ng-controller=&quot;Controller2&quot;&amp;gt;
                &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
                &amp;lt;button ng-click=&quot;test2()&quot;&amp;gt;test2&amp;lt;/button&amp;gt;
                &amp;lt;button ng-click=&quot;commonFn()&quot;&amp;gt;通用&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button ng-click=&quot;commonFn()&quot;&amp;gt;通用&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_MVC3lx.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;HelloAngular&quot;, []);

myModule.controller(&quot;Commoncontroller&quot;, [&#39;$scope&#39;,
    function($scope){
        $scope.commonFn = function(){
            alert(&quot;这里是通用功能&quot;)
        }
    }
]);

myModule.controller(&quot;Controller1&quot;, [&#39;$scope&#39;,
    function($scope) {
        $scope.greeting = {
            test:&#39;hello1&#39;
        }
        $scope.test1=function(){
            alert(&quot;test1&quot;)
        }
    }
]);

myModule.controller(&quot;Controller2&quot;, [&#39;$scope&#39;,
    function($scope) {
        $scope.greeting = {
            test:&#39;hello2&#39;
        }
        $scope.test2=function(){
            alert(&quot;test2&quot;)
        }
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-cdafd059174ae05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的例子中可以看到我们获得最终的hello1和hello2在界面上显示实际上都是来自于$scope这里面对象的属性这就是AngularJS实现数据模型的方式，&lt;/p&gt;

&lt;p&gt;###如何复用Viel视图?&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;HelloAngular_Directive.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;E&#39;,
        template: &#39;&amp;lt;div&amp;gt;Hi everyone!&amp;lt;/div&amp;gt;&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-d688b09b01e01ac8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看看body表情内的&lt;hello&gt;&lt;/hello&gt;标签，很显然浏览器是不认识这个标签的，不认识他在默认情况下浏览器会忽略他，Angular js就会想一下怎样能让浏览器认识这个标签呢，这就需要借助Angular js的Directive这个特性，&lt;/p&gt;

&lt;p&gt;上面代码，自己定义了一个hello标签，然后借助Angular的directive机制把他替换成div内容是Hi everyone!这样一个字符串，&lt;/p&gt;

&lt;p&gt;Angular js的视图是需要通过指令去实现的，&lt;/p&gt;

&lt;p&gt;Angular js的MVC是借助于$scope实现的！！！&lt;/p&gt;

&lt;p&gt;也就是说全部借助于作用域去实现的&lt;/p&gt;

&lt;p&gt;那么作用域是什么呢&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.show-scope-demo .ng-scope,.show-scope-demo .ng-scope {
	border: 1px solid red;
	margin: 3px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;Scope1.css&quot; /&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div class=&quot;show-scope-demo&quot;&amp;gt;
			&amp;lt;div ng-controller=&quot;GreetCtrl&quot;&amp;gt;
				Hello !
			&amp;lt;/div&amp;gt;
			&amp;lt;div ng-controller=&quot;ListCtrl&quot;&amp;gt;
				&amp;lt;ol&amp;gt;
					&amp;lt;li ng-repeat=&quot;name in names&quot;&amp;gt;
						 from 
					&amp;lt;/li&amp;gt;
				&amp;lt;/ol&amp;gt;
			&amp;lt;/div&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;Scope1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function GreetCtrl($scope, $rootScope) {
	$scope.name = &#39;World&#39;;
	$rootScope.department = &#39;Angular&#39;;
}

function ListCtrl($scope) {
	$scope.names = [&#39;Igor&#39;, &#39;Misko&#39;, &#39;Vojta&#39;];
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-b4655b2aa451a87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上代码有两个控制器，第一个GreetCtrl，第二个ListCtrl，&lt;/p&gt;

&lt;p&gt;GreetCtrl里面Hello !&lt;/p&gt;

&lt;p&gt;ListCtrl里面使用到了&lt;code&gt;ng-repeat&lt;/code&gt;的指令，这个指令是用来迭代一个数组的，我们有一个names数组放了很多的姓名，&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;ng-repeat&lt;/code&gt;的指令可以将数组一个个输出，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function GreetCtrl($scope, $rootScope) {
	$scope.name = &#39;World&#39;;
	$rootScope.department = &#39;Angular&#39;;
}

function ListCtrl($scope) {
	$scope.names = [&#39;Igor&#39;, &#39;Misko&#39;, &#39;Vojta&#39;];
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GreetCtrl控制器中$scope.name设置了 ‘World’;的字符串&lt;/p&gt;

&lt;p&gt;然后在$rootScope上面创建了一个属性叫做department&lt;/p&gt;

&lt;p&gt;$rootScope也就是根作用域，$rootScope是处于最顶层的作用域对象，&lt;/p&gt;

&lt;p&gt;整个作用域就像html标签一样是一个树型的结构，$rootScope就类似于根标签html。&lt;/p&gt;

&lt;p&gt;ListCtrl控制器中有一个names数组，数组有三个内容，在页面上通过&lt;code&gt;ng-repeat&lt;/code&gt;的指令把他输出&lt;/p&gt;

&lt;p&gt;页面显示结果告诉我们department 是根作用于上的属性，也就是说作用域是有一个层次结构的，在内层的作用域上面如果获得不到的属性他就会一一向上查找，这个过程其实和js里面的原型继承或者说原型查找机制是一模一样的。&lt;/p&gt;

&lt;p&gt;例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
		&amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;Scope1.css&quot; /&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;div ng-controller=&quot;EventController&quot;&amp;gt;
			Root scope
			&amp;lt;tt&amp;gt;MyEvent&amp;lt;/tt&amp;gt; count: 
			&amp;lt;ul&amp;gt;
				&amp;lt;li ng-repeat=&quot;i in [1]&quot; ng-controller=&quot;EventController&quot;&amp;gt;
					&amp;lt;button ng-click=&quot;$emit(&#39;MyEvent&#39;)&quot;&amp;gt;
						$emit(&#39;MyEvent&#39;)
					&amp;lt;/button&amp;gt;
					&amp;lt;button ng-click=&quot;$broadcast(&#39;MyEvent&#39;)&quot;&amp;gt;
						$broadcast(&#39;MyEvent&#39;)
					&amp;lt;/button&amp;gt;
					&amp;lt;br&amp;gt;
					Middle scope
					&amp;lt;tt&amp;gt;MyEvent&amp;lt;/tt&amp;gt; count: 
					&amp;lt;ul&amp;gt;
						&amp;lt;li ng-repeat=&quot;item in [1, 2]&quot; ng-controller=&quot;EventController&quot;&amp;gt;
							Leaf scope
							&amp;lt;tt&amp;gt;MyEvent&amp;lt;/tt&amp;gt; count: 
						&amp;lt;/li&amp;gt;
					&amp;lt;/ul&amp;gt;
				&amp;lt;/li&amp;gt;
			&amp;lt;/ul&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;Scope2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function EventController($scope) {
	$scope.count = 0;
	$scope.$on(&#39;MyEvent&#39;, function() {
		$scope.count++;
	});
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-89829b5d8e760d43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-ccb6f14408557f5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ng-repeat=”i in [1]”是内联表达式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function EventController($scope) {
	$scope.count = 0;
	$scope.$on(&#39;MyEvent&#39;, function() {
		$scope.count++;
	});
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的js，先初始化一个$scope.count = 0;&lt;/p&gt;

&lt;p&gt;当收到MyEvent的时候$scope上的count就会加1&lt;/p&gt;

&lt;p&gt;###神奇的$scope&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$scope是一个POJO(Plain Old Javascript Object)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$scope是一个普通的js对象&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$scope提供了一些工具方法$watch()/$apply()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$watch()/$apply()是用来实时监控一些属性的变化的一般来说不会手动去调用这些方法。他会在内部帮我们去监控&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$scope是表达式的执行环境（或者叫作用域）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$scope是一个树型结构，与DOM标签平行&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;子$scope对象会继承父$scope上的属性和方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;每一个AngularJS应用只有一个根$scope对象，（一般位于ng-app上）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$scope可以传播事件，类似于DOM事件，可以向上也可以向下&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$scope不仅是MVC的基础，也是后面实现双向数据绑定的基础&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可以用angular.element($0).scope()进行调试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-b407f798e7435176.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装调试插件&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:49:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics4.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics4.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>基本概念和用法-MVC 2-1</title>
        <description>&lt;p&gt;###为什么需要MVC？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;代码规模越来越大，切分职责是大势所趋&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了复用，很多逻辑是一模一样的，这个时候会把他抽出来形成公共的代码，这个时候如果不适应MVC这样的手段是没有办法把这些逻辑抽出来。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了后期维护的方便，修改一块功能不影响其他功能&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;MVC只是手段，终极目的是模块化和复用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###前端MVC的困难在哪里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-2be230d9a86970f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####如何使用Controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- ng-controller控制器 --&amp;gt;
        &amp;lt;div ng-controller=&quot;HelloAngular&quot;&amp;gt;
            &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_MVC.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function HelloAngular($scope) {
    $scope.greeting = {
        text: &#39;Hello&#39;
    };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ng-controller控制器是由一个函数来充当的，&lt;br /&gt;
AngularJS是通过ng-controller这样一个指令来实现他的控制器的，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;控制器基本思想和理论&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-722e3c9398e1d42c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MVC是模型-视图-控制器的意思，在一般经典的状态下，控制器是负责和视图进行双向交互，也负责跟数据模型进行双向交互，但是视图和数据模型之间是没有交互的，&lt;/p&gt;

&lt;p&gt;在最简单的情况下，一个控制器是可以控制多个视图的，但是这样一来会有个问题，如果视图1和视图2没有任何的关系，或者说根本没有业务上的的逻辑关系，这个时候控制器的角色就会很尴尬，&lt;/p&gt;

&lt;p&gt;因为我们会把视图1和视图2的代码放到控制器，控制器就成了大杂烩。&lt;/p&gt;

&lt;p&gt;第一种这种实现方式实际上在一些小型的项目中可以这样去实现，很显然是没有办法去应对大型项目，很自认就有了第二种方式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-d6fd6a333cb4b9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说我们一个控制器只负责跟一个视图进行双向交互，这两个试图如果他们需要公用数据模型，那么我们就在控制器里面来共同使用同一份数据模型就可以了，这是改进的MVC实现&lt;/p&gt;

&lt;p&gt;这个时候又出现一个问题如果我们控制器1和控制器2里面会出现相同的内容，这个时候应该怎么做&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-c90583a9e031f24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有人会说我可以把他抽出来实现一个同用的控制器继承通用的控制器这样就能让公共部分放到公共的控制器里，这种方式是部队的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-8b99efd8b3c3eaf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以通过Service去做，这个是AngularJS官方的实现方式，首先会把公用的东西抽成一个服务让控制器去调用他，而不是让控制器去继承，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;Commoncontroller&quot;&amp;gt;
            &amp;lt;!-- ng-controller控制器 --&amp;gt;
            &amp;lt;div ng-controller=&quot;Controller1&quot;&amp;gt;
                &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
                &amp;lt;button ng-click=&quot;test1()&quot;&amp;gt;test1&amp;lt;/button&amp;gt;
                &amp;lt;button ng-click=&quot;commonFn()&quot;&amp;gt;通用&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div ng-controller=&quot;Controller2&quot;&amp;gt;
                &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
                &amp;lt;button ng-click=&quot;test2()&quot;&amp;gt;test2&amp;lt;/button&amp;gt;
                &amp;lt;button ng-click=&quot;commonFn()&quot;&amp;gt;通用&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button ng-click=&quot;commonFn()&quot;&amp;gt;通用&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_MVC3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascriot&quot;&gt;function Commoncontroller($scope) {
    $scope.commonFn = function(){
    	alert(&quot;这里是通用功能&quot;)
    }
}

function Controller1($scope) {
    $scope.greeting = {
    	test:&#39;hello1&#39;
    }
    $scope.test1=function(){
    	alert(&quot;test1&quot;)
    }
}

function Controller2($scope) {
    $scope.greeting = {
    	test:&#39;hello2&#39;
    }
    $scope.test2=function(){
    	alert(&quot;test2&quot;)
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-749caf45f76d06e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###AngularJS语境下的MVC是如何实现的&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:47:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics3.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics3.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>开发、调试、测试工具1-2</title>
        <description>&lt;p&gt;前端开发需自动化，工业化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-568ab0cf4d744a36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###推荐代码编辑工具&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sublime&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-4a262741b93135db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webstorm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-6c3e978732b0df18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###断点调试工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-924a6e759c1e8fc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###版本管理工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-d242a4d202dedccf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-dcd69c9677841023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###开发和调试工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-223d2b7071ffc673.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###代码合并和混淆工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-5466c85c662128ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###依赖管理工具&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-5c466fcb2574d54e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-bb11e26a71435436.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-fc6e9c2b5f768822.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-9923f927b02e86f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-7083cb16bf32fa6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-1b98eadbf33189f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:46:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics2.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics2.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
      <item>
        <title>AngularJS快速入手1-1</title>
        <description>&lt;p&gt;###AngularJS简介&lt;/p&gt;

&lt;p&gt;目前最新版本1.3.0&lt;/p&gt;

&lt;p&gt;放弃了ie8&lt;/p&gt;

&lt;p&gt;引入了单向数据绑定&lt;/p&gt;

&lt;p&gt;删掉了一些过时的api (据说是为了AngularJS2.0做准备)&lt;/p&gt;

&lt;p&gt;###AngularJS-实例演示4大核心特性&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 .MVC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-7706890b00d0fa54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- ng-controller我们的控制器  ng-controller赋值成HelloAngular --&amp;gt;
        &amp;lt;div ng-controller=&quot;HelloAngular&quot;&amp;gt;
            &amp;lt;!-- p标签充当了视图的功能 --&amp;gt;
            &amp;lt;!-- 取值这个地方就是充当数据模型 --&amp;gt;
            &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;!-- 导入了angular-1.3.0.js文件 --&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
        //HelloAngular这个函数充当了控制器
        function HelloAngular($scope) {
            $scope.greeting = {
                text: &#39;Hello&#39;
            };
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-65e2b7e3decbbd7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 模块化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;HelloAngular&quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div ng-controller=&quot;helloAngular&quot;&amp;gt;
            &amp;lt;p&amp;gt;,Angular&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&quot;HelloAngular_Module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//这里调用了angular.module方法
var myModule = angular.module(&quot;HelloAngular&quot;, []);

myModule.controller(&quot;helloAngular&quot;, [&#39;$scope&#39;,
    function HelloAngular($scope) {
        $scope.greeting = {
            text: &#39;Hello&#39;
        };
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-275f189bedad7699.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在HelloAngular_Module.js文件中调用了angular.module方法，然后给他一个字符串“HelloAngular”，后面还传了方括号空数组，通过字面量看出这是在定义一个模块，var myModule是一个模块，定义完模块后在模块上面调用了一个controller方法很显然这是告诉angular要生成一个控制器”helloAngular”是控制器的名称，后面方括号里面第一个参数’$scope’是告诉angularjs帮我注入’$scope’。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-011b390978faa7f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AngularJS概念有Module，有Directive，有Filter，其实一点要抓住一个点，一切都是从模块开始的，在AngularJS开发中首先想到的是模块也就是&lt;strong&gt;Module&lt;/strong&gt;，其他所有的东西其实都是挂在&lt;strong&gt;Module&lt;/strong&gt;下面的，因为只有把模块创建后你才能在模块上去调用Service,controller等方法，所以首先想到的是模块，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 指令系统&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;HelloAngular_Directive.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;javascript&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;E&#39;,
        template: &#39;&amp;lt;div&amp;gt;Hi everyone!&amp;lt;/div&amp;gt;&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-d688b09b01e01ac8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看看body表情内的&lt;hello&gt;&lt;/hello&gt;标签，很显然浏览器是不认识这个标签的，不认识他在默认情况下浏览器会忽略他，Angular js就会想一下怎样能让浏览器认识这个标签呢，这就需要借助Angular js的Directive这个特性，&lt;/p&gt;

&lt;p&gt;一切都是从模块开始的，所以我们需要创建模块&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myModule = angular.module(&quot;MyModule&quot;, []);
myModule.directive(&quot;hello&quot;, function() {
    return {
        restrict: &#39;E&#39;,
        template: &#39;&amp;lt;div&amp;gt;Hi everyone!&amp;lt;/div&amp;gt;&#39;,
        replace: true
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模块创建好再调用模块上面directive方法，这个方法也有两个参数&lt;code&gt;&quot;hello&quot;&lt;/code&gt;是指令的名称，也就是对应的标签名，后面是一个函数，这个函数就是生成标签的， template: ‘&amp;lt;div&amp;gt;Hi everyone!&amp;lt;/div&amp;gt;’,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-15bff53254dc9fec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最终hello是被替换成模板template，&lt;/p&gt;

&lt;p&gt;这个就是angular的指令&lt;br /&gt;
我们可以自定义一大堆的指令然后做一些封装我们在调用的时候会非常方便，当然指令不只是定义标签这么简单，还有很多其他功能，比如说&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app=&quot;MyModule&quot;&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;hello&amp;gt;&amp;lt;/hello&amp;gt;
	&amp;lt;/body&amp;gt;
	&amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
	&amp;lt;script src=&quot;HelloAngular_Directive.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在html里面ng-app=”MyModule”,这个实际上就是一个指令，这里复制ng-app等于”MyModule”&lt;/p&gt;

&lt;p&gt;“MyModule”在var myModule = angular.module(“MyModule”, []);js里，很显然是告诉Angular js要去使用我们这个模块，ng-app意思和C语言里的main或者是java里面的main方法。&lt;/p&gt;

&lt;p&gt;Angular js检测到ng-app这个指令的时候就知道我从ng-app这个指令开始内部的标签内容就归我Angular js来管了，也就是说Angular js从ng-app这个地方启动的，可以想象既然是main函数main方法，一个应用里面显然只能有一个，所以在任意一个单页Angular js应用里面ng-app这个指令只能出现一次。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-2969be9fb6c72e5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 双向数据绑定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular js 是实现了双向数据绑定，其他的前端框架都没有实现这样一个特性，目前大多数前端框架都是实现单向数据绑定。&lt;/p&gt;

&lt;p&gt;来看看单向数据绑定的流程&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-4f67727e7c975367.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先是我们把模板写好，再加上数据，数据可能是从后台服务端读进来的，模板和数据结合在一起，通过数据绑定机制生成一段html标签然后把这段标签插入到文档流里面，这是经典单向数据绑定的处理流程。&lt;/p&gt;

&lt;p&gt;html一旦生成完以后就没法再变了，当有新的数据的时候我们只能重新再来一遍。&lt;/p&gt;

&lt;p&gt;Angular js认为单向数据绑定的过程实在是不怎么优雅，所以他觉得我应该实现双向数据绑定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-ee3f8ae4464562b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他的核心想法是这样的，&lt;/p&gt;

&lt;p&gt;视图，数据是对应的当视图上的内容发生变化的时候他希望数据模型里面立刻发生变化，当数据模型发生变化的时候视图自己自动会去更新，很显然这里需要  借助一个事件机制。&lt;/p&gt;

&lt;p&gt;在html里有什么样的视图会发生变化？表单。在很多的页面中会出现很多的表单，表单是来收集用户的输入的，这些数据是非常容易变化的，在数据发生变化就会通过Angular js机制同步到数据模型上面。&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html ng-app&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;input ng-model=&quot;greeting.text&quot;/&amp;gt;
            &amp;lt;p&amp;gt;,AngularJS&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script src=&quot;js/angular-1.3.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3877962-8df2bddb9e767ce3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面代码实现效果在input输入框输入任何东西底下的显示框都会立刻显示，&lt;/p&gt;

&lt;p&gt;这是什么原理呢&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input ng-model=&quot;greeting.text&quot;/&amp;gt;
&amp;lt;p&amp;gt;,AngularJS&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先有一个输入框&lt;br /&gt;
然后绑定了一个ng-model=”greeting.text”,&lt;br /&gt;
这个是时候底下有个p标签有个双花括号来获取greeting.text的值。&lt;br /&gt;
双花括号是什么意思呢？&lt;br /&gt;
在Angular js里面是取值的意思，是一个取值表达式。&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 23:45:13 +0800</pubDate>
        <link>http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics1.html</link>
        <guid isPermaLink="true">http://www.huanghanlian.com/angularjs/2017/03/11/angularjs-basics1.html</guid>
        
        <category>AngularJS</category>
        
        
        <category>AngularJS</category>
        
      </item>
    
  </channel>
</rss>
